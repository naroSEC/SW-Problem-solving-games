{
    "1": {
        "question": "/vul.php?arg=1;phpinfo()\n/vul.php?arg=1;system(\"uname -a\")\n/vul.php?arg=1;system(\"cat /etc/passwd\")\n/vul.php?arg=1;system(\"ps -ef\")\nvul.php\n$myvar = 'somevalue';\n$x = $_GET['arg'];\neval('$myvar = ' . $x . ';');",
        "vuln": "코드 삽입",
        "TFpositive": "정탐",
        "guide": "198"
    },
    "2": {
        "question": "String fileName = request.getParameter(\"P\");\nBufferedInputStream bis = null;\nBufferedOutputStream bos = null;\nFileInputStream fis = null;\ntry {\nresponse.setHeader(\"Content-Disposition\", \"attachment;filename=\"+fileName+\";\");\n...\n// . 외부로부터 입력받은 값이 검증 또는 처리 없이 파일처리에 수행되었다\nfis = new FileInputStream(\"C:/datas/\" + fileName);\nbis = new BufferedInputStream(fis);\nbos = new BufferedOutputStream(response.getOutputStream());",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "정탐",
        "guide": "202"
    },
    "3": {
        "question": "public class CodeInjectionController {\n@RequestMapping(value = \"/execute\", method = RequestMethod.GET)\npublic String execute(@RequestParam(\"src\") String src)\nthrows ScriptException {\nScriptEngineManager scriptEngineManager = new ScriptEngineManager();\nScriptEngine scriptEngine= scriptEngineManager.getEngineByName(\"javascript\");\nString retValue = (String)scriptEngine.eval(src);\nreturn retValue;\n}\n}",
        "vuln": "코드 삽입",
        "TFpositive": "정탐",
        "guide": "194"
    },
    "4": {
        "question": "@using (Html.BeginForm(\"PostTest\",\"Home\",FormMethod.Post,null))\n{\n@Html.AntiForgeryToken()\n<input type=\"submit\" value=\"Html PsBk Click\" />\n}",
        "vuln": "크로스사이트 요청 위조",
        "TFpositive": "오탐",
        "guide": "273"
    },
    "5": {
        "question": "String fileName = request.getParameter(\"P\");\nBufferedInputStream bis = null;\nBufferedOutputStream bos = null;\nFileInputStream fis = null;\ntry {\nresponse.setHeader(\"Content-Disposition\", \"attachment;filename=\"+fileName+\";\");\n...\nfilename = filename.replaceAll(\"\\\\.\", \"\").replaceAll(\"/\", \"\").replaceAll(\"\\\\\\\\\", \"\");\nfis = new FileInputStream(\"C:/datas/\" + fileName);\nbis = new BufferedInputStream(fis);\nbos = new BufferedOutputStream(response.getOutputStream());\nint read;\nwhile((read = bis.read(buffer, 0, 1024)) != -1) {\nbos.write(buffer,0,read);\n}\n}",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "오탐",
        "guide": "202"
    },
    "6": {
        "question": "String msg_str = \"\";\nString tmp = request.getParameter(\"slf_msg_param_num\");\ntmp = StringUtil.isNullTrim(tmp);\nif (tmp.equals(\"0\")) {\nmsg_str = PropertyUtil.getValue(msg_id);\n} else {\nint param_ct = Integer.parseInt(tmp);\nString[] strArr = new String[param_ct];",
        "vuln": "정수형 오버플로우",
        "TFpositive": "정탐",
        "guide": "290"
    },
    "7": {
        "question": "String gubun = request.getParameter(\"gubun\");\n......\nString sql = \"SELECT * FROM board WHERE b_gubun = '\" + gubun + \"'\";\nConnection con = db.getConnection();\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(sql);",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "181"
    },
    "8": {
        "question": "<body>\n<%\nString name = request.getparameter(\"name\");\n%>\n...\n<script>\n(new Function(<%=name%>))();\n</script>\n</body>",
        "vuln": "코드 삽입",
        "TFpositive": "정탐",
        "guide": "195"
    },
    "9": {
        "question": "import org.hibernate.Query\nimport org.hibernate.Session\n......\nString name = request.getParameter(\"name\");\nQuery query = session.createQuery(\"from Student where studentName = '\" + name\n+ \"' \");",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "183"
    },
    "10": {
        "question": "$myvar = \"varname\";\n$x = $_GET['arg'];\n$x=preg_replace(\"/[w\\\\^a-z0-9]/i\", \"\", $x);\neval(\"\\$myvar = \\$x;\");",
        "vuln": "코드 삽입",
        "TFpositive": "오탐",
        "guide": "198"
    },
    "11": {
        "question": "@RequestMapping(value = \"/execute\", method = RequestMethod.GET)\npublic String execute(@RequestParam(\"src\") String src) throws ScriptException {\nif (src.matches(\"[\\\\w]*\") == false) {\nthrow new IllegalArgumentException();\n}\nScriptEngineManager scriptEngineManager = new ScriptEngineManager();\nScriptEngine scriptEngine = scriptEngineManager.getEngineByName(\"javascript\");\nString retValue = (String)scriptEngine.eval(src);\nreturn retValue;\n}",
        "vuln": "코드 삽입",
        "TFpositive": "정탐",
        "guide": "195"
    },
    "12": {
        "question": "class ACC {\npublic static void executeScript(final String name) throws ScriptException {\nScriptEngineManager manager = new ScriptEngineManager();\nScriptEngine engine = manager.getEngineByName(\"javascript\");\nengine.eval(\"print('\" + name + \"')\");\n}\n}\n...\n@RequestMapping(value = \"/print\", method = RequestMethod.POST)\npublic void print(@RequestParam(\"name\") String name) throws ScriptException{\nACC.executeScript(name);\n...\n}",
        "vuln": "코드 삽입",
        "TFpositive": "정탐",
        "guide": "197"
    },
    "13": {
        "question": "String gubun = request.getParameter(\"gubun\");\n......\nString sql = \"SELECT * FROM board WHERE b_gubun = '\" + gubun + \"'\";\nConnection con = db.getConnection();\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(sql);",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "181"
    },
    "14": {
        "question": "$MessageFile = \"cwe-94/messages.out\";\nif ($_GET[\"action\"] == \"NewMessage\") {\n$name = $_GET[\"name\"];\n$message = $_GET[\"message\"];\n$handle = fopen($MessageFile, \"a+\");\nfwrite($handle, \"<b>$name</b> says '$message'<hr>\\n\");\nfclose($handle);\necho \"Message Saved!<p>\\n\";\n} else if ($_GET[\"action\"] == \"ViewMessages\") {\ninclude($MessageFile);\n}",
        "vuln": "코드 삽입",
        "TFpositive": "정탐",
        "guide": "198"
    },
    "15": {
        "question": "import org.hibernate.Query\nimport org.hibernate.Session\n......\nString name = request.getParameter(\"name\");\nQuery query = session.createQuery(\"from Student where studentName = ? \");\nquery.setString(0, name);",
        "vuln": "SQL 삽입",
        "TFpositive": "오탐",
        "guide": "183"
    },
    "16": {
        "question": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN“\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n......\n<select id=\"boardSearch\" parameterType=\"map\" resultType=\"BoardDto\">\nselect * from tbl_board where title like '%${keyword}%' order by pos asc\n</select>",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "182"
    },
    "17": {
        "question": "class ACC {\npublic static void executeScript(final String name) throws ScriptException {\nif (!Filter.filterScript(name)) {\nthrow new IllegalArgumentException();\n}\nScriptEngineManager manager = new ScriptEngineManager();\nScriptEngine engine = manager.getEngineByName(\"javascript\");\nengine.eval(\"print('\" + name + \"')\");\n...\n}\n...\n@Controller\npublic class evalPrint {\n@RequestMapping(value = \"/print\", method = RequestMethod.POST)\npublic Student upload(String name) throws ClassNotFoundException, IOException {\nACC.executeScript(name);\n...\npublic class Filter {\npublic static boolean filterScript(String name) {\nboolean returnValue = false;\nif (name.matches(\"[\\\\w]*\")) {\nreturnValue = true;\n}\nreturn returnValue;\n}\n}",
        "vuln": "코드 삽입",
        "TFpositive": "오탐",
        "guide": "199"
    },
    "18": {
        "question": "@RequestMapping(value = \"/execute\", method = RequestMethod.GET)\npublic String execute(@RequestParam(\"src\") String src) throws ScriptException {\nif (src.matches(\"UNDER_BAR“) == true) {\n...\n} else if (src.matches(\"DOLLAR“) == true) {\n...\n} else {\nthrow new IllegalArgumentException();\n}\n...\n}",
        "vuln": "코드 삽입",
        "TFpositive": "오탐",
        "guide": "196"
    },
    "19": {
        "question": "import org.hibernate.Query\nimport org.hibernate.Session\n......\nString name = request.getParameter(\"name\");\nQuery query = session.createQuery(\"from Student where studentName = :name \");\nquery.setParameter(\"name\", name);",
        "vuln": "SQL 삽입",
        "TFpositive": "오탐",
        "guide": "183"
    },
    "20": {
        "question": "public class CodeInjection {\npublic static void main(String[] args) throws ScriptException {\nScriptEngineManager scriptEngineManager = new ScriptEngineManager();\nScriptEngine scriptEngine= scriptEngineManager.getEngineByName(\"javascript\");\nString src = \"print('\" + args[1] + \"');\";\nscriptEngine.eval(src);\n}\n}",
        "vuln": "코드 삽입",
        "TFpositive": "정탐",
        "guide": "196"
    },
    "21": {
        "question": "…\nint level = request.getParameter(“level”);\nint group = request.getParameter(“group”);\nString id = request.getParameter(“id”);\nString sql=”update member set level=? , group=? where id=?;”;\npstmt =con.prepareStatement(sql);\npstmt.setInt(1, level);\npstmt.setString(2, group);\npstmt.setInt(3, id);\npstmt.executeUpdate();\n…",
        "vuln": "크로스사이트 요청 위조",
        "TFpositive": "정탐",
        "guide": "274"
    },
    "22": {
        "question": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN“\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n......\n<select id=\"boardSearch\" parameterType=\"map\" resultType=\"BoardDto\">\nselect * from tbl_board where title like '%'||#{keyword}||'%' order by pos asc\n</select>",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "182"
    },
    "23": {
        "question": "public void ButtonClickBad(object sender, EventArgs e)\n{\nstring connect = \"MyConnString\";\nstring usrinput = Request[\"ID\"];\nstring query = \"Select * From Products Where ProductID = \" + usrinput;\nusing (var conn = new SqlConnection(connect))\n{\nusing (var cmd = new SqlCommand(query, conn))\n{\nconn.Open();\ncmd.ExecuteReader(); /* BUG */\n}\n}\n}",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "184"
    },
    "24": {
        "question": "session.setAttribute(“SESSION_CSRF_TOKEN”, UUID.randomUUID().toString());\n<input type=”hidden” name=”param_csrf_token” value=”${SESSION_CSRF_TOKEN}” />\nString pToken = request.getParameter(“param_csrf_token”);\nString sToken = (String)session.getAttribute(“SESSION_CSRF_TOKEN”);\nif (pToken != null && pToken.equals(sToken) {\n......\n} else {\n..\n..\n..\n}",
        "vuln": "크로스사이트 요청 위조",
        "TFpositive": "오탐",
        "guide": "274"
    },
    "25": {
        "question": "<script>\nvar obj = {};\nfor(var i = 0; i < 5; i++){\neval(\"obj.test\" + i + \"=\" + i);\n}\nconsole.log(obj);\n</script>",
        "vuln": "코드 삽입",
        "TFpositive": "오탐",
        "guide": "200"
    },
    "26": {
        "question": "File file = new File(getServletConfig().getServletContext().getRealPath(“/”)+\n“/jsp/gis/gcc/cmm/xml/”+(String)tempChartImgList.get(k));",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "오탐",
        "guide": "209"
    },
    "27": {
        "question": "void ButtonClickGood(object sender, EventArgs e)\n{\nstring connect = \"MyConnString\";\nstring usrinput = Request[\"ID\"];\nstring query = \"Select * From Products Where ProductID = @ProductID\";\nusing (var conn = new SqlConnection(connect))\n{\nusing (var cmd = new SqlCommand(query, conn))\n{\ncmd.Parameters.AddWithValue(\"@ProductID\",\nConvert.ToInt32(Request[\"ProductID\"]);\nconn.Open();\ncmd.ExecuteReader();\n}\n}",
        "vuln": "SQL 삽입",
        "TFpositive": "오탐",
        "guide": "185"
    },
    "28": {
        "question": "public class U99 {\npublic void f() throws IOException {\nint def = 1000;\nServerSocket serverSocket;\nProperties props = new Properties();\nString fileName = “file_list”;\nFileInputStream in = new FileInputStream(filename);\nprops.load(in);\nString service = props.getProperty(“Service No”);\nint port = Integer.parseInt(service);\nif (port != 0)\nserverSocket = new ServerSocket(port + 3000);\nelse\nserverSocket = new ServerSocket(def + 3000);\nServerSocket.close();\n}\n}",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "정탐",
        "guide": "208"
    },
    "29": {
        "question": "string usrInput = Request.QueryString[\"ID\"];\nstring str = \"ID : \" + usrinput;\nRequest.Write(str);",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "213"
    },
    "30": {
        "question": "protected void doGet(HttpServletRequest req, HttpServletResponse resp)\nthrows IOException {\nURL url = new URL(req.getParameter(\"url\"));\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n}",
        "vuln": "서버사이드 요청 위조",
        "TFpositive": "정탐",
        "guide": "277"
    },
    "31": {
        "question": "< EgovFileCmprs.jsp >\n<%\nboolean isCompressed = false;\nString source = request.getParameter(“source”);\nString target = request.getParameter(“target”);\nif (source != null && source.length() > 0 && target != null && target.length() > 0) {\nisCompressed = EgovFileCmprs.cmprsFile(source, target);\n…\n%>\n< EgovFileCmprs.java >\npublic static boolean cmprsFile(String source, String target) throwsException {\nboolean result = false;\nint cnt = 0;\nFileInputStream finput = null;\nFileOutputStream foutput = null;\nZipOutputStream zoutput = null;\nString source1 = source.replace(‘\\\\’, FILE_SEPARATOR).replace(‘/’,\nFILE_SEPARA- TOR);\nString target1 = target.replace(‘\\\\’, FILE_SEPARATOR).replace(‘/’, FILE_SEPARATOR);\nFile srcFile = new File(source1);",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "정탐",
        "guide": "208"
    },
    "32": {
        "question": "<% String keyword = request.getParameter(\"keyword\"); %>\nkeyword = keyword.replaceAll(\"&\", \"&amp;\");\nkeyword = keyword.replaceAll(\"<\", \"&lt;\");\nkeyword = keyword.replaceAll(\">\", \"&gt;\");\nkeyword = keyword.replaceAll(\"\\\"\", \"&quot;\");\nkeyword = keyword.replaceAll(\"'\", \"&#x27;\");\nkeyword = keyword.replaceAll(\"/\"\", \"&#x2F;\");\nkeyword = keyword.replaceAll(\"(\", \"&#x28;\");\nkeyword = keyword.replaceAll(\")\", \"&#x29;\");\n: <%=keyword%> 검색어\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n: <c:out value=\"${m.content}\"/> 검색결과\n<script type=\"text/javascript\">\ndocument.write(\"keyword:“ +\n<%=Encoder.encodeForJS(Encoder.encodeForHTML(keyword))%>);\n</script>",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "212"
    },
    "33": {
        "question": "File[] f_list = f.listFiles( new FilenameFilter() {\npublic boolean accept(File dir, String name) {\nString org_code = SystemierConfig.getPropertiesBean().getProperty(“is.OrgCode”);\nif(name.matches(org_code + “.*CVDTST.*” + “.txt”)) {\nreturn true;\n}\nreturn false;\n}\n});\nBufferedReader in = new BufferedReader( new FileReader(f_list[0].getPath()) );",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "오탐",
        "guide": "209"
    },
    "34": {
        "question": "public class Connect {\nprivate Map<String, URL> urlMap;\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws\nIOException {\nURL url = urlMap.get(req.getParameter(\"url\"));\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n}\n}",
        "vuln": "서버사이드 요청 위조",
        "TFpositive": "오탐",
        "guide": "277"
    },
    "35": {
        "question": "class Login {\npublic Connection getConnection() throws SQLException {\nDriverManager.registerDriver(new com.microsoft.sqlserver.jdbc.SQLServerDriver());\nString dbConnection = PropertyManager.getProperty(“db.connection”);\nreturn DriverManager.getConnection(dbConnection);\n}\npublic void doPrivilegedAction(String username, char[] password) throws SQLException\n{\nConnection connection = getConnection();\nif (connection == null) {\n// handle error\n}\ntry {\nString pwd = HashUtil.hashPassword(password);\nString sqlString = “SELECT * FROM db_user WHERE username = ‘”+ username\n+ “’ AND password = ‘” + pwd + “’”;\nStatement stmt = connection.createStatement();\nResultSet rs = stmt.executeQuery(sqlString);\nif (!rs.next()) {\nthrow new SecurityException(“User name or password incorrect”);\n}\n// Authenticated; proceed\n} finally {\n// …\n}\n}\n}",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "186"
    },
    "36": {
        "question": "<input type=\"hidden\" name=\"price\" value=\"1000\"/>\n<br/> : HDTV 품목\n<br/> : <input type=\"hidden\" name=\"quantity\" /> 수량 개\n<br/><input type=\"submit\" value=\" \" /> 구입\n......\ntry {\nprice = request.getParameter(\"price\");\nquantity = request.getParameter(\"quantity\");\ntotal = Integer.parseInt(quantity) * Float.parseFloat(price);\n} catch (Exception e) {\n......",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "정탐",
        "guide": "297"
    },
    "37": {
        "question": "<% String keyword = request.getParameter(\"keyword\"); %>\n: <%=keyword%> 검색어",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "212"
    },
    "38": {
        "question": "<input type=\"hidden\" name=\"price\" value=\"1000\"/>\n<br/> : HDTV 품목\n<br/> : <input type=\"hidden\" name=\"quantity\" /> 수량 개\n<br/><input type=\"submit\" value=\" \" /> 구입\n......\ntry {\nitem = request.getParameter(“item”);\nprice = productService.getPrice(item);\nquantity = request.getParameter(\"quantity\");\ntotal = Integer.parseInt(quantity) * price;\n} catch (Exception e) {\n......\n}\n......",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "오탐",
        "guide": "298"
    },
    "39": {
        "question": "public class G03 extends HttpServlet {\nprotected void doPost(HttpServletRequest req, HttpServletResponse res)\nthrows ServletException, IOException {\nString url = req.getParameter(\"url\");\nInputStream inputStream = null;\nOutputStream outputStream = null;\nURL u = new URL(url);\nres.setHeader(\"content-disposition\",\"attachment;fileName=‘’\");\nint length;\nbyte[] bytes = new byte[1024];\ninputStream = u.openStream();\noutputStream = res.getOutputStream();\nwhile ((length = inputStream.read(bytes)) > 0) {\noutputStream.write(bytes, 0, length);\n}\n}\n}",
        "vuln": "서버사이드 요청 위조",
        "TFpositive": "정탐",
        "guide": "278"
    },
    "40": {
        "question": "…\nString tableName = props.getProperty(“jdbc.tableName”);\nString name = props.getProperty(“jdbc.name”);\nString query = “SELECT * FROM “ + tableName + “ WHERE Name =‘” + name + “’”;\nstmt = con.prepareStatement(query);\nrs = stmt.executeQuery();\n…",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "187"
    },
    "41": {
        "question": ": ${m.content} 검색결과\n<script type=“text/javascript”>\ndocument.write(“keyword:” + <%=keyword%>);\n</script>",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "212"
    },
    "42": {
        "question": "< projectDetail.jsp >\n<%\nString pid = request.getParameter(“projectid”) == null ? “” :\nrequest.getParame- ter(“projectid”);\nMashupProjectDao mashupDao = (MashupProjectDao)\nDAOHelper.getMashupPro- jectDao(application);\nProjectCommentDao commentDao = (ProjectCommentDao)\nDAOHelper.getProject- CommentDao(application);\nMashupProjectTbl prjTbl = mashupDao.getMashupProjectTbl(pid);\nArrayList commentList =\ncommentDao.getProjectCommentTblByWhere(“where projectid=” + pid + “ order by\nwritedate desc”);\nString loginID = session.getAttribute(“userid”) == null ? “” : (String)\nsession.getAt- tribute(“userid”);\nint category = prjTbl.getCategory();\nString categoryStr = “”;\n< ProjectCommentDAO.java >\npublic ArrayList getProjectCommentTblByWhere(String where) {\nString sql_ =\nthis.getMessageSourceAccessor().getMessage(“ProjectCommentDao.\ngetProjectCommentTbl”);\nArrayList ret = new ArrayList();\nsql_ += “ “ + where;\ntry {\nJdbcTemplate template_ = this.getJdbcTemplate();\nList tmp = template_.query(sql_, new ProjectCommentRowMapper());\nret = Util.trimToResize(tmp);\n} catch (DataAccessException e) {",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "187"
    },
    "43": {
        "question": "HttpCookie cookie = new HttpCookie(“Authentificated”, “1”);\nResponse.Cookies.Add(cookie);",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "정탐",
        "guide": "299"
    },
    "44": {
        "question": "…\nString basePath = “/web/data/”;\nString filename = request.getParameter(“filename”);\nString fullPath = basePath + filename;\n…\nFile f = new File(fullPath);\nif (f.isFile()) {\nFileInputStream in = new FileInputStream(fullPath);\nServletOutputStream os = response.getOutputStream();\nbyte[] buf = new byte[1024];\nint len = 0;\nwhile ((len = in.read(buf)) > 0) {\nos.write(buf, 0, len);\n}\n}\n…",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "정탐",
        "guide": "206"
    },
    "45": {
        "question": "public class ShowHelp {\nprivate final static String safeDir = \"c:\\\\help_files\\\\\";\npublic static void main(String[] args) throws IOException {\nString helpFile = args[0];\ntry (BufferedReader br = new BufferedReader(new FileReader(safeDir + helpFile))) {\nString line;\nwhile ((line = br.readLine()) != null) {\nSystem.out.println(line);\n}\n...\n}",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "정탐",
        "guide": "203"
    },
    "46": {
        "question": "…\n@RequestMapping(value = “/Download.do”)\npublic void downloadFile(\n@RequestParam(value = “filePath”, required = true) String filePath\n, HttpServletRequest request\n, HttpServletResponse response) throws Exception {\n…\nfilePath = filePath.replaceAll(“\\\\.”, “”);\nfilePath = filePath.replaceAll(“/”, “”);\nfilePath = filePath.replaceAll(“\\\\\\\\”, “”);\nString targetFile = getServletContext().getRealPath(“/”) + filePath;\nFile file = new File(targetFile);\n…",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "정탐",
        "guide": "207"
    },
    "47": {
        "question": "public class ShowHelpSolution {\nprivate final static String safeDir = \"c:\\\\help_files\\\\\";\npublic static void main(String[] args) throws IOException {\nString helpFile = args[0];\nif (helpFile != null) {\nhelpFile = helpFile.replaceAll(\"\\\\.{2,}[/\\\\\\\\]\", \"\");\n}\ntry (BufferedReader br = new BufferedReader(new FileReader(safeDir + helpFile))) {\n...",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "오탐",
        "guide": "203"
    },
    "48": {
        "question": "Session[“Authentificated”] = “1”;",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "오탐",
        "guide": "299"
    },
    "49": {
        "question": "…\npublic class U9102 implements ContactDAO {\npublic List<Contact> listContacts() {\nPersistenceManager pm = getPersistenceManagerFactory().getPersistenceMan ager();\nString query = “select from “ + Contact.class.getName();\ntry {\nProperties props = new Properties();\nString fileName = “contacts.txt”;\nFileInputStream in = new FileInputStream(fileName);\nif (in != null) {\nprops.load(in);\nin.close();\n}\nString name = props.getProperty(“name”);\nif (name != null) {\nquery += “ where name = ‘” + name + “’”;\n}\n} catch (IOException e) {\n…\n}\nreturn (List<Contact>) pm.newQuery(query).execute();\n}\n}\n…",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "188"
    },
    "50": {
        "question": "FILE *fin = NULL;\nregex_t regex;\nInt ret;\nchar* filename = getenv(“reportfile”);\nret = regcomp(&regex, “.*\\\\.\\\\..*”, 0);\nret = regexec(&regex, filename, 0, NULL, 0);\nIf (!ret) {\n}\nfin = fopen(filename, “r”);\nwhile (fgets(buf, BUF_LEN, fin)) {\n}",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "오탐",
        "guide": "205"
    },
    "51": {
        "question": "public static void main(String[] args) {\nString[] jsargs = {“-j=”+args[0]};\nString[] allArgs = new String[jsargs.length + args.length];",
        "vuln": "정수형 오버플로우",
        "TFpositive": "오탐",
        "guide": "295"
    },
    "52": {
        "question": "public class ConnectProperties {\nFileReader newFile = new FileReader(“File.properties”);\nProperties properties = new Properties();\nproperties.load(newFile);\nprotected void doGet(HttpServletRequestreq, HttpServletResponseresp) throws\nIOException{\nURL url = new URL(properties.getProperty(\"connectUrl\"));\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n}\n}",
        "vuln": "서버사이드 요청 위조",
        "TFpositive": "정탐",
        "guide": "279"
    },
    "53": {
        "question": "void SecurityDecision() {\nint sockfd = socket(PF_INET, SOCK_STREAM, 0);\nchar* server_info = getenv(“server_addr”);\nif( connect( sockfd, (struct sockaddr *)server_addr, sizeof(struct socketaddr) ) < 0\n) {\nreturn;\n}\n}",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "정탐",
        "guide": "299"
    },
    "54": {
        "question": "string file = Request.QueryString[\"path\"];\nif (file != null)\n{\nFile.Delete(file);\n}",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "정탐",
        "guide": "204"
    },
    "55": {
        "question": "private String getRemoteContent(String url) throws IOException {\nBufferedReader in = new BufferedReader(new InputStreamReader(\nnew URL(url).openStream()));\nreturn FileCopyUtils.copyToString(in);\n}\npublic String getContent(String inUrl) throws IOException {\ntry {\nString str = getRemoteContent(inUrl);\nstr = str.replace(\"<head>\", \"<head><base href='\" + inUrl\n+ \"' /><base target='_blank' /><script>top.studio.startPageIFrameLoaded();“\n+ \"</script>\");\nreturn str;\n} catch (Exception e) {\nreturn \"\";\n}\n}",
        "vuln": "서버사이드 요청 위조",
        "TFpositive": "정탐",
        "guide": "279"
    },
    "56": {
        "question": "String squery = \"for $user in doc(users.xml)//user[username='\"\n+ UserTextBox.Text + \"'and pass='\" + PwdTextBox.Text + \"'] return $user\";\nstring validatedQuery = squery.Replace('/','*');\nProcessor processor = new Processor();\nXQueryCompiler compiler = processor.NewXQueryCompiler();\nXdmNode indoc = processor.NewDocumentBuilder().Build(new\nUri(Server.MapPath(\"users.xml\")));\nusing (StreamReader query = new StreamReader(validatedQuery))\n{ // tainted value propagated\nXQueryCompiler compiler = processor.NewXQueryCompiler();\nXQueryExecutable exp = compiler.Compile(query.ReadToEnd());\n// xquery created\nXQueryEvaluator eval = exp.Load();\neval.ContextItem = indoc;\nSerializer qout = new Serializer();\nqout.SetOutputProperty(Serializer.METHOD, \"xml\");\nqout.SetOutputProperty(Serializer.DOCTYPE_PUBLIC, \"-//W3C//DTD XHTML 1.0\nStrict//EN\");\nqout.SetOutputProperty(Serializer.DOCTYPE_SYSTEM,\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\");\nqout.SetOutputProperty(Serializer.INDENT, \"yes\");\nqout.SetOutputProperty(Serializer.OMIT_XML_DECLARATION, \"no\");\nqout.SetOutputWriter(Response.Output);\neval.Run(qout);\n}",
        "vuln": "XML 삽입",
        "TFpositive": "오탐",
        "guide": "253"
    },
    "57": {
        "question": "SecurityDecision() {\nint sockfd = socket(PF_INET, SOCK_STREAM, 0);\nstruct sockaddr_in server_addr;\nmemset( &server_ info, 0, sizeof(server_info));\nserver_info.sin_family = AF_INET;\nserver_info.sin_port = htons(5555);\nserver_info.sin_addr.s_addr = inet_addr(“127.0.0.1”);\nif( connect( sockfd, (struct sockaddr *)server_addr, sizeof(struct socketaddr) ) < 0\n) {\nreturn;\n}\n}",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "오탐",
        "guide": "300"
    },
    "58": {
        "question": "public void doGet(HttpServletRequest request, HttpServletResponse response) {\nString host = request.getParameter(\"host\");\nbyte[] bytes = getImage(host, defaultBytes);\nif (bytes != null) {\nwriteBytesToStream(bytes, response);\n}\n}\nprivate byte[] getImage(String host, byte[] defaultImage) {\nbyte[] bytes = getImage(\"http://\" + host + \"/favicon.ico\");\n...\n}",
        "vuln": "서버사이드 요청 위조",
        "TFpositive": "정탐",
        "guide": "280"
    },
    "59": {
        "question": "<?php\nrequire_once('./htmlpurifier/library/HTMLPurifier.includes.php');\n$purifier = new HTMLPurifier();\n$ch = curl_init();\n$url = $_GET['url'];\n$urlinfo = parse_url($url);\n$scheme = $urlinfo['scheme'];\n$host = $urlinfo['host'];\n$ip = gethostbyname($host);\nif ($ip === \"169.254.169.254\") {\ndie(\"Invalid host\");\n} elseif ($scheme !== 'http' && $scheme !== 'https') {\ndie(\"Invalid scheme\");\n}\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n$html = curl_exec($ch);\necho $purifier->purify($html);",
        "vuln": "서버사이드 요청 위조",
        "TFpositive": "오탐",
        "guide": "280"
    },
    "60": {
        "question": "String[] referer_split = Util.split(request.getHeader(“Referer”).toString(),”/”);\nString refererValue = referer_split[referer_split.length-1];",
        "vuln": "정수형 오버플로우",
        "TFpositive": "오탐",
        "guide": "295"
    },
    "61": {
        "question": "string file = Request.QueryString[\"path\"];\nif (file != null)\n{\nif (file.IndexOf('\\\\') > -1 || file.IndexOf('/') > -1)\n{\nResponse.Write(\"Path Traversal Attack\");\n}\nelse\n{\nFile.Delete(file);\n}\n}",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "오탐",
        "guide": "204"
    },
    "62": {
        "question": "…\nCookie[] cookies = request.getCookies() ;\nfor(int i=0 ; i<cookies.length ; i++) {\nCookie c = cookies[i] ;\nif(c.getName().equals(“authecticated”)&&Boolean.TRUE.equals(c.getValue())){\nauthenticated = true ;\n}\n}\n…",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "정탐",
        "guide": "300"
    },
    "63": {
        "question": "char* filename = getenv(“reportfile”);\nFILE *fin = NULL;\nfin = fopen(filename, “r”);\nwhile (fgets(buf, BUF_LEN, fin)) {\n}",
        "vuln": "경로 조작 및 자원 삽입",
        "TFpositive": "정탐",
        "guide": "205"
    },
    "64": {
        "question": "<%\nString username = request.getParameter(“username”);\nString password = request.getParameter(“password”);\nif (username==nill || password==null || !isAuthenticatedUser(usename, password)) {\nthrow new MyException(“ 인증 에러”);\n}\nCookie userCookie = new Cookie(“user”,username);\nCookie authCookie = new Cookie(“authenticated”,”1”);\nresponse.addCookie(userCookie);\nresponse.addCookie(authCookie);\n%>",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "정탐",
        "guide": "301"
    },
    "65": {
        "question": "public class U9103 implements ServletContextListener {\npublic List<?> getAllItemsInWildcardCollection() {\nEntityManager em = getEntityManager();\nList<U9103> r_type = null;\ntry {\nProperties props = new Properties();\nString fileName = “conditions.txt”;\nFileInputStream in = new FileInputStream(fileName);\nprops.load(in);\nString id = props.getProperty(“id”);\nQuery query = em.createNativeQuery(“SELECT OBJECT(i) FROM Item i WHERE\ni.itemID > “ + id);\nList<U9103> items = query.getResultList();\n…\nreturn r_type;\n}\n…",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "189"
    },
    "66": {
        "question": "private static String getRemoteContent(String url) throws IOException {\nif ( isPrivateIP(url) == true ) {\nreturn \"invalid url\";\n}\nBufferedReader in = new BufferedReader(new InputStreamReader(\nnew URL(url).openStream()));\nreturn FileCopyUtils.copyToString(in);\n}\npublic static boolean isPrivateIP(String r){\nString private_ip[] = { \"127.\", \"0.\", \"10.\",\n\"172.16.\", \"172.17.\", \"172.18.\", \"172.19.\", \"172.20.\", \"172.21.\",\n\"172.22.\", \"172.23.\", \"172.24.\", \"172.25.\", \"172.26.\", \"172.27.\",\n\"172.28.\", \"172.29.\", \"172.30.\", \"172.31.\", \"192.168.\", \"169.254.\",\n\"fc\", \"fd\", \"fe\", \"ff\", \"::1\"\n};\nfor(int i = 0; i<private_ip.length; i++){\nif(r.toLowerCase().trim().startsWith(private_ip[i])){\nreturn true;\n}\n}\nreturn false;\n}",
        "vuln": "서버사이드 요청 위조",
        "TFpositive": "오탐",
        "guide": "281"
    },
    "67": {
        "question": "<input type=”hidden” name=”price” value=”1000”/>\n<br/> : HDTV 품목\n<br/> : <input type=”hidden” name=”quantity” /> 수량 개\n<br/><input type=”submit” value=” ” /> 구입\n......\ntry {\nprice = 1000;\nquantity = request.getParameter(“quantity”);\ntotal = quantity * Float.parseFloat(price);\n}catch (Exception e) {\n......\n}\n......",
        "vuln": "보안기능 결정에 사용되는 부적절한 입력값",
        "TFpositive": "오탐",
        "guide": "301"
    },
    "68": {
        "question": "string usrInput = Request.QueryString[\"ID\"];\nstring str = \"ID : \" + usrinput;\nvar sanitizedStr = Sanitizer.GetSafeHtmlFragment(str);\nRequest.Write(sanitizedStr);",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "213"
    },
    "69": {
        "question": "typedef struct _charvoid {\nchar x[16];\nvoid * y;\nvoid * z;\n} charvoid\nvoid badCode() {\ncharvoid cv_struct\ncv_struct.y = (void *) SRC_STR;\nprintLine((char *) cv_struct.y);\nmemcpy(cv_struct.x, SRC_STR, sizeof(cv_struct));\nprintLine((char *) cv_struct.x);\nprintLine((char *) cv_struct.y);\n}",
        "vuln": "메모리 버퍼 오버 플로우",
        "TFpositive": "정탐",
        "guide": "304"
    },
    "70": {
        "question": "String squery = \"for $user in doc(users.xml)//user[username='\"\n+ UserTextBox.Text + \"'and pass='\" + PwdTextBox.Text + \"'] return $user\";\nProcessor processor = new Processor();\nXQueryCompiler compiler = processor.NewXQueryCompiler();\nXdmNode indoc = processor.NewDocumentBuilder().Build(new\nUri(Server.MapPath(\"users.xml\")));\nusing (StreamReader query = new StreamReader(squery))\n{\nXQueryCompiler compiler = processor.NewXQueryCompiler();\nXQueryExecutable exp = compiler.Compile(query.ReadToEnd());\nXQueryEvaluator eval = exp.Load();\neval.ContextItem = indoc;\nSerializer qout = new Serializer();\nqout.SetOutputProperty(Serializer.METHOD, \"xml\");\nqout.SetOutputProperty(Serializer.DOCTYPE_PUBLIC, \"-//W3C//DTD XHTML 1.0\nStrict//EN\");\nqout.SetOutputProperty(Serializer.DOCTYPE_SYSTEM,\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\");\nqout.SetOutputProperty(Serializer.INDENT, \"yes\");\nqout.SetOutputProperty(Serializer.OMIT_XML_DECLARATION, \"no\");\nqout.SetOutputWriter(Response.Output);\neval.Run(qout);\n}",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "252"
    },
    "71": {
        "question": "try {\nURL url = Util.class.getClassLoader().getResource(publicKeyFilepath);\npubKey = url.openStream();\n} catch (MalformedURLException e) {\npubKey = new FileInputStream(publicKeyFilepath);\n}\nbyte[] bytes = new byte[pubKey.available()];",
        "vuln": "정수형 오버플로우",
        "TFpositive": "오탐",
        "guide": "295"
    },
    "72": {
        "question": "<?xml version=”1.0” encoding=”UTF-8”?>\n<!DOCTYPE sqlMap PUBLIC “-//iBATIS.com//DTD SQL Map 2.0//EN”\n“http://www. ibatis.com/dtd/sql-map-2.dtd”>\n<sqlMap namespace=”Student”>\n<resultMap id=”StudentResult” class=”Student”>\n<result column=”ID” property=”id” />\n<result column=”NAME” property=”name” />\n</resultMap>\n<select id=”listStudents” resultMap=”StudentResult”>\nSELECT NUM, NAME\nFROM STUDENTS\nORDER BY NUM\n</select>\n<select id=”nameStudent” parameterClass=”Integer” resultClass=”Student”>\nSELECT NUM, NAME\nFROM STUDENTS\nWHERE NUM = #num#\n</select>\n<!-- dynamic SQL --> 사용\n<delete id=”delStudent” parameterClass=”Student”>\nDELETE STUDENTS\nWHERE NUM = #num# AND NAME = ‘$name$’\n</delete>\n</sqlMap>",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "190"
    },
    "73": {
        "question": "typedef struct _charvoid {\nchar x[16];\nvoid * y;\nvoid * z;\n} charvoid\nstatic void goodCode() {\ncharvoid cv_struct\ncv_struct.y = (void *) SRC_STR;\nprintLine((char *) cv_struct.y);\nmemcpy(cv_struct.x, SRC_STR, sizeof(cv_struct.x));\ncv_struct.x[(sizeof(cv_struct.x)/sizeof(char))-1] = '\\0';\nprintLine((char *) cv_struct.x);\nprintLine((char *) cv_struct.y);\n}",
        "vuln": "메모리 버퍼 오버플로우",
        "TFpositive": "오탐",
        "guide": "305"
    },
    "74": {
        "question": "String name = props.getProperty(\"name\");\n.......\nString es = \"doc('users.xml')/userlist/user[uname='$xname']\";\nXQPreparedExpression expr = conn.prepareExpression(es);\nexpr.bindString(new QName(\"xname\"), name, null);\nXQResultSequence result = expr.executeQuery();",
        "vuln": "XML 삽입",
        "TFpositive": "오탐",
        "guide": "252"
    },
    "75": {
        "question": "void foo(char* string){\nchar buf[16];\nstrcpy(buf, string);\n…\n}",
        "vuln": "메모리 버퍼 오버플로우",
        "TFpositive": "정탐",
        "guide": "306"
    },
    "76": {
        "question": "import org.hibernate.Query\nimport org.hibernate.Session\n......\nString name = request.getParameter(“name”);\nQuery query = session.createQuery(“from Student where studentName = ‘” + name\n+ “’ “);",
        "vuln": "SQL 삽입",
        "TFpositive": "정탐",
        "guide": "191"
    },
    "77": {
        "question": "String name = props.getProperty(\"name\");\n.......\nString es = \"doc('users.xml')/userlist/user[uname='\"+name+\"']\";\nXQPreparedExpression expr = conn.prepareExpression(es);\nXQResultSequence result = expr.executeQuery();",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "251"
    },
    "78": {
        "question": "void host_lookup(char *user_supplied_addr)\n{\nstruct hostent *hp;\nin_addr_t *addr;\nchar hostname[64];\nin_addr_t inet_addr(const char *cp);\nvalidate_addr_form(user_supplied_addr);\naddr = inet_addr(user_supplied_addr);\nhp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);\nstrcpy(hostname, hp->h_name);\n}",
        "vuln": "메모리 버퍼 오버플로우",
        "TFpositive": "정탐",
        "guide": "306"
    },
    "79": {
        "question": "import org.hibernate.Query\nimport org.hibernate.Session\n......\nString name = request.getParameter(“name”);\nQuery query = session.createQuery(“from Student where studentName = ? “);\nquery.setString(0, name);",
        "vuln": "SQL 삽입",
        "TFpositive": "오탐",
        "guide": "192"
    },
    "80": {
        "question": "XMLInputFactory factory = XMLInputFactory.newFactory();\nfactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\nfactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\nXMLEventReadereventReader= factory.createXMLEventReader(new FileReader(\"xxe.xml\"));",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "오탐",
        "guide": "250"
    },
    "81": {
        "question": "char* trimTrailingWhitespace(char *strMessage, int length)\n{\nchar *retMessage;\nchar *message = malloc(sizeof(char)*(length+1));\nchar message[length+1];\nint index;\nfor (index = 0; index < length; index++) {\nmessage[index] = strMessage[index];\n}\nmessage[index] = ‘\\0’;\nint len = index-1;\nwhile (isspace(message[len])) {\nmessage[len] = ‘\\0’;\nlen--;\n}\nretMessage = message;\nreturn retMessage;\n}",
        "vuln": "메모리 버퍼 오버플로우",
        "TFpositive": "정탐",
        "guide": "307"
    },
    "82": {
        "question": "import org.hibernate.Query\nimport org.hibernate.Session\n......\nString name = request.getParameter(“name”);\nQuery query = session.createQuery(“from Student where studentName = :name “);\nquery.setParameter(“name”, name);",
        "vuln": "SQL 삽입",
        "TFpositive": "오탐",
        "guide": "192"
    },
    "83": {
        "question": "int XSS(int argc, char* argv[]) {\nunsigned int i = 0;\nchar data[1024];\n…\ncgiFromString(“user input”, data, sizeof(data));\nfprintf(cgiOut, “Print user input = %s<br/>”, data);\nfprintf(cgiOut, “</body></html>\\n”);\nreturn 0;13:\n}",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "214"
    },
    "84": {
        "question": "import java.util.Calendar\n......\npublic static void main(String[] args) {\nCalendar validDate = Calendar.getInstance();\nvalidDate.set(2014, Calendar.OCTOBER, 14);\nSystem.out.printf( args[0] + \" did not match! HINT:\nIt was issued on %1$terd of some month\", validate);\n}",
        "vuln": "포맷 스트링 삽입",
        "TFpositive": "정탐",
        "guide": "309"
    },
    "85": {
        "question": "-\n\nString lastLogin = request.getParameter(\"last_login\");\nif (lastLogin == null || \"\".equals(lastLogin)) {\nreturn;\n}\nCookie c = new Cookie(\"LASTLOGIN\", lastLogin);\nc.setMaxAge(1000);\nc.setSecure(true);\nresponse.addCookie(c);\nresponse.setContentType(\"text/html\");",
        "vuln": "HTTP 응답 분할",
        "TFpositive": "정탐",
        "guide": "284"
    },
    "86": {
        "question": "import java.util.Calendar\n:\npublic static void main(String[] args) {\nCalendar validDate = Calendar.getInstance();\nvalidDate.set(2014, Calendar.OCTOBER, 14);\nSystem.out.printf(\"%s did not match! HINT: It was issued on %2$terd of some\nmonth\", args[0], validate);\n}",
        "vuln": "포맷 스트링 삽입",
        "TFpositive": "오탐",
        "guide": "310"
    },
    "87": {
        "question": "String lastLogin = request.getParameter(\"last_login\");\nif (lastLogin == null || \"\".equals(lastLogin)) {\nreturn;\n}\nlastLogin = lastLogin.replaceAll(\"[\\\\r\\\\n]\", \"\");\nCookie c = new Cookie(\"LASTLOGIN\", lastLogin);\nc.setMaxAge(1000);\nc.setSecure(true);\nresponse.addCookie(c);",
        "vuln": "HTTP 응답 분할",
        "TFpositive": "오탐",
        "guide": "285"
    },
    "88": {
        "question": "void incorrect_password(const char *user) {\nstatic const char msg_format[] = \"%s cannot be authenticated.\\n\";\nsize_t len = strlen(user) + sizeof(msg_format);\nchar *msg = (char *)malloc(len);\nif (msg == NULL) {\n}\nint ret = snprintf(msg, len, msg_format, user);\nif (ret < 0 || ret >= len) {\n}\nfprintf(stderr, msg);\nfree(msg);\nmsg = NULL;\n}",
        "vuln": "포맷 스트링 삽입",
        "TFpositive": "정탐",
        "guide": "310"
    },
    "89": {
        "question": "cgiFromString(“user input”, data, sizeof(data));\nif(strchr(p, ‘<’)) return;\nif(strchr(p, ‘>’)) return;\n…\nfprintf(cgiOut, “Print user input = %s<br/>”, data);\nfprintf(cgiOut, “</body></html>\\n”);",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "214"
    },
    "90": {
        "question": "String msg_str = “”;\nString tmp = request.getParameter(“slf_msg_param_num”);\ntmp = StringUtil.isNullTrim(tmp);\nif (tmp.equals(“0”)) {\nmsg_str = PropertyUtil.getValue(msg_id);\n} else {\nint param_ct = Integer.parseInt(tmp);\nString[] strArr = new String[param_ct];\n......\n}",
        "vuln": "정수형 오버플로우",
        "TFpositive": "정탐",
        "guide": "294"
    },
    "91": {
        "question": "void incorrect_password(const char *user) {\nstatic const char msg_format[] = \"%s cannot be authenticated.\\n\";\nsize_t len = strlen(user) + sizeof(msg_format);\nchar *msg = (char *)malloc(len);\nif (msg == NULL) {\n}\nint ret = snprintf(msg, len, msg_format, user);\nif (ret < 0 || ret >= len) {\n}\nif (fputs(msg, stderr) == EOF) {\n}\nfree(msg);\nmsg = NULL;\n}",
        "vuln": "포맷 스트링 삽입",
        "TFpositive": "오탐",
        "guide": "311"
    },
    "92": {
        "question": "SchemaFactory factory =\nSchemaFactory.newInstance(\"XMLConstants.W3C_XML_SCHEMA_NS_URI\");\nSchema schema = factory.newSchema();\nValidator validator = schema.newValidator();\nvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "오탐",
        "guide": "250"
    },
    "93": {
        "question": "string usrInput = Request.QueryString[\"ID\"];\nstring validatedInput = usrInput.Replace(\"\\n\", \"\").Replace(\"\\r\",\"\");\nResponse.AddHeader(\"foo\", \"bar\" + validatedInput);",
        "vuln": "HTTP 응답 분할",
        "TFpositive": "오탐",
        "guide": "285"
    },
    "94": {
        "question": "class Format {\nstatic Calendar c = new GregorianCalendar(1995, GregorianCalendar.MAY, 23);\npublic static void main(String[] args) {\nSystem.out.printf(args[0] + “ did not match! HINT: It was issued on %1$terd of\nsome month”, c);\n}\n}",
        "vuln": "포맷 스트링 삽입",
        "TFpositive": "정탐",
        "guide": "312"
    },
    "95": {
        "question": "string usrInput = Request.QueryString[\"ID\"];\nResponse.AddHeader(\"foo\", \"bar\" + usrInput);",
        "vuln": "HTTP 응답 분할",
        "TFpositive": "정탐",
        "guide": "285"
    },
    "96": {
        "question": "<%@page contentType=”text/html” pageEncoding=”UTF-8”%>\n<html>\n<head>\n<meta http-equiv=”Content-Type” content=”text/html; charset=UTF-8”>\n</head>\n<body>\n<h1>XSS Sample</h1>\n<%\nString name = request.getParameter(“name”);\nString title = null;\n…\nrs = pstmt.executeQuery(query);\nwhile(rs.next()){\ntitle = rs.getString(“title”))\n…}\n%>\n<p>NAME:<%=name%></p>\n<p>TITLE:<%=title%></p>\n</body>\n</html>",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "215"
    },
    "97": {
        "question": "SchemaFactory factory =\nSchemaFactory.newInstance(\"XMLConstants.W3C_XML_SCHEMA_NS_URI\");\nfactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nfactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\nSchema schema = factory.newSchema(Source);",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "오탐",
        "guide": "250"
    },
    "98": {
        "question": "@RequestMapping(“/aps/common/makeCommonCode.do”)\npublic void makeCommonCode(HttpSession session,\n@ModelAttribute(“apApsCom- monCodeVO”)\nApApsCommonCodeVO apApsCommonCodeVO, HttpServletRequest request,\nHttpServletResponse\nresponse, ModelMap model) throws Exception {\nString target = apApsCommonCodeVO.getTarget();\nList resultList = apApsExcelService.selectCommonCode(apApsCommonCodeVO);\nJSONArray jsonArray = new JSONArray();\njsonArray = JSONArray.fromObject(resultList);\nresponse.setContentType(“text/xml;charset=utf-8”);\nPrintWriter printWriter = response.getWriter();\nprintWriter.print(target);\nprintWriter.print(jsonArray.toString());\nprintWriter.flush();\nprintWriter.close();\n}",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "216"
    },
    "99": {
        "question": "String xml = \"xxe.xml\";\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\nDocumentBuilder builder = df.newDocumentBuilder();\nDocument document = builder.parse(new InputSource(xml));\nDOMSource domSource = new DOMSource(document);",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "오탐",
        "guide": "249"
    },
    "100": {
        "question": "String xml = \"xxe.xml\";\nSaxHandler handler = new SaxHandler();\nSAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser parser = factory.newSAXParser();\nparser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nparser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\nparser.parse(xml, handler);",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "오탐",
        "guide": "249"
    },
    "101": {
        "question": "…\n<%@ taglib prefix=”c” url=”http://java.sun.com/jsp/jstl/core”%>\n<%@ taglib uri=”http://java.sun.com/jsp/jstl/functions” prefix=”fn”%>\n…\n<c:out value=”${param.name}” escapeXml=”false” />",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "216"
    },
    "102": {
        "question": "<%\nString query = request.getQueryString();\nString nextUrl = request.getRequestURL().toString() + query;\n%>\n….\n<input type=”hidden” name=”nextUrl” value= “<%=nextUrl%>” />",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "217"
    },
    "103": {
        "question": "String xml = \"xxe.xml\";\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\nDocumentBuilder builder = df.newDocumentBuilder();\nDocument document = builder.parse(new InputSource(xml));\nDOMSource domSource = new DOMSource(document);",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "오탐",
        "guide": "248"
    },
    "104": {
        "question": "<%\nString param = request.getParameter(“param”);\nif ( param != null ) {\nparam = param.replaceAll(“<script>”,””);\nparam = param.replaceAll(“</script>”,””);\n}\n%>\n…\n<p> : <%=title%> </p> 제목",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "217"
    },
    "105": {
        "question": "public static Vector parsFileBySize(String parFile, int[] parLen, int parLine) throws\nException {\nVector parResult = new Vector();\nString parFile1 = parFile.replace(‘\\\\’, FILE_SEPARATOR).replace(‘/’, FILE_SEPARATOR);\nFile file = new File(parFile1);\nBufferedReader br = null;\ntry {\nif (file.exists() && file.isFile()) {\nbr = new BufferedReader(new InputStreamReader(new FileInputStream(file)));\nString [] strArr = new String [parLine];\nString line = “”;\nint readCnt = 0;\nwhile ((line = br.readLine()) != null && readCnt < parLine) {\nif (line.length() <= MAX_STR_LEN) strArr[readCnt++] = line;\n}",
        "vuln": "정수형 오버플로우",
        "TFpositive": "정탐",
        "guide": "293"
    },
    "106": {
        "question": "@RequestMapping(value = \"/xmlupload\", method = RequestMethod.POST)\npublic Student xmlUpload(@RequestParam(\"file\") MultipartFile multipartFile)\nFile xmlFile = new File(multipartFile.getOriginalFilename());\nmultipartFile.transferTo(xmlFile);\nSAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser saxParser = factory.newSAXParser();\nSAXParseraxParser.parse(new FileInputStream(xmlFile), new DefaultHandler());",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "정탐",
        "guide": "248"
    },
    "107": {
        "question": "<%\nString param = request.getParameter(“param”);\n%>\n<!-- <%=param%> -->",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "217"
    },
    "108": {
        "question": "protected void common(HttpServletRequest request, HttpServletResponse\nresponse) throws Exception {\nString fileid = request.getParameter(“fileid”);\nBufferedInputStream in = null;\nString uploadPath = properties.getString(propertyName + “UPLOAD”);\ntry {\nString fileName = uploadPath + “/” + fileid;\nresponse.setContentType(mimetype + “;charset=utf-8”);\nString fileName = java.net.URLEncoder.encode(fileid, “UTF-8”);\nresponse.setHeader(“Content-Disposition”,\n“attachment; filename=\\”” + fileName + “\\””);\nresponse.setHeader(“Content-Transfer-Encoding”, “binary”);\nresponse.getOutputStream().flush();\nresponse.getOutputStream().close();\n}\ncatch(Exception e) {\nif(in!=null) {\nin.close();\n}\n}\nfinally{ }\n}",
        "vuln": "HTTP 응답분할",
        "TFpositive": "정탐",
        "guide": "286"
    },
    "109": {
        "question": "String msg_str = \"\";\nString tmp = request.getParameter(\"slf_msg_param_num\");\ntmp = StringUtil.isNullTrim(tmp);\nif (tmp.equals(\"0\")) {\nmsg_str = PropertyUtil.getValue(msg_id);\n} else {\ntry {\nint param_ct = Integer.parseInt(tmp);\nif (param_ct < 0) {\nthrow new Exception();\n}\nString[] strArr = new String[param_ct];\n} catch(Exception e) {\nmsg_str = \" ( ) 잘못된 입력 접근 입니다.\";\n}",
        "vuln": "정수형 오버플로우",
        "TFpositive": "오탐",
        "guide": "291"
    },
    "110": {
        "question": "public class G06 extends HttpServlet {\nprivate ServletFileUpload uploader = null;\n...\nprotected void doPost(HttpServletRequest request, HttpServletResponse response)\nthrows ServletException, IOException {\n...\ntry {\nList<FileItem> fileItemsList = uploader.parseRequest(request);\nIterator<FileItem> fileItemsIterator = fileItemsList.iterator();\nwhile (fileItemsIterator.hasNext()) {\nFileItem fileItem = fileItemsIterator.next();\nFile xmlFile = new File(\nrequest.getServletContext().getAttribute(\"FILES_DIR\") + File.separator+\nfileItem.getName());\nfileItem.write(xmlFile);\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument document = db.parse(xmlFile);\nchangeConfiguration(document);\n...\n}",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "정탐",
        "guide": "247"
    },
    "111": {
        "question": "response.setHeader(“Content-Length”,Long.toString(file.length()));",
        "vuln": "HTTP 응답분할",
        "TFpositive": "오탐",
        "guide": "288"
    },
    "112": {
        "question": "public voidservice(HttpServletRequest request, HttpServletResponse res) throws\nServ- letException, IOException {\nString contextRealPath = request.getSession().getServletContext().getRealPath(“/”);\nString savePath = contextRealPath + “upfolder”\nres.setContentType(“utf-8”);\nString filename = request.getParameter(“file”);\nres.setContentType(“application/octet;charset=utf-8”);\nres.setHeader(“Content-Disposition”, “attachment;filename=” + filename);",
        "vuln": "HTTP 응답분할",
        "TFpositive": "정탐",
        "guide": "287"
    },
    "113": {
        "question": "......\nString lastLogin = request.getParameter(“last_login”);\nif (lastLogin == null || “”.equals(lastLogin)) {\nreturn;\n}\nCookie c = new Cookie(“LASTLOGIN”, lastLogin);\nc.setMaxAge(1000);\nc.setSecure(true);\nresponse.addCookie(c);\nresponse.setContentType(“text/html”);\n......",
        "vuln": "HTTP 응답분할",
        "TFpositive": "정탐",
        "guide": "287"
    },
    "114": {
        "question": "<%=respose.sendRedirect(requst.getParameter(“url”))%>",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "218"
    },
    "115": {
        "question": "value = libxml_disable_entity_loader(true);\n$dom = new DOMDocument();\n$dom -> loadXML($xml);\nlibxml_disable_entity_loader($value);",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "오탐",
        "guide": "247"
    },
    "116": {
        "question": "response.sendRedirect(request.getContextPath() + “/login.do”);",
        "vuln": "HTTP 응답분할",
        "TFpositive": "오탐",
        "guide": "288"
    },
    "117": {
        "question": "…\nString cnt = request.getParameter(“cnt”);\nif( cnt == null ) {\ncnt = “0”;\n}\nint cntI = Integer.parseInt(cnt);\nString[] arr = new String[cntI];\nfor( int i = 0 ; i <cntI ; i++ ) {\narr[i] = request.getParameter(“r”+i);\n}\n…",
        "vuln": "정수형 오버플로우",
        "TFpositive": "정탐",
        "guide": "293"
    },
    "118": {
        "question": "String nm = props.getProperty(\"name\");\nString pw = props.getProperty(\"password\");\n......\nXPathFactory factory = XPathFactory.newInstance();\nXPath xpath = factory.newXPath();\n......\nXPathExpression expr = xpath.compile(\"//users/user[login/text()='\"+nm+\"' and\npassword/text()='\"+pw+\"']/home_dir/text()\");\nObject result = expr.evaluate(doc, XPathConstants.NODESET);\nNodeList nodes = (NodeList) result;\nfor (int i=0; i<nodes.getLength(); i++) {\nString value = nodes.item(i).getNodeValue();\nif (value.indexOf(\">\") < 0) {\nSystem.out.println(value);\n}:\n}",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "254"
    },
    "119": {
        "question": "String lastLogin = request.getParameter(“last_login”);\nif (lastLogin == null || “”.equals(lastLogin)) {\nreturn;\n}\nlastLogin = lastLogin.replaceAll(“[￦￦r ￦￦n]”, “”);\nCookie c = new Cookie(“LASTLOGIN”, lastLogin);\nc.setMaxAge(1000);\nc.setSecure(true);\nresponse.addCookie(c);\nresponse.setContentType(“text/html”);\n......",
        "vuln": "HTTP 응답분할",
        "TFpositive": "오탐",
        "guide": "288"
    },
    "120": {
        "question": "<script language=”javascript”>\nlocation.href(‘<%=request.getParameter(“url”)%>’);",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "218"
    },
    "121": {
        "question": "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(\"http://apache.org/xml/featuresdisallow-doctype-decl\", true);\ndbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\ndbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\ndbf.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\nfalse);\ndbf.setXIncludeAware(false);\ndbf.setExpandEntityReferences(false);\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument document = db.parse(receivedXml);\nModel model = (Model) u.unmarshal(document);",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "오탐",
        "guide": "246"
    },
    "122": {
        "question": "<%@ taglib prefix=”c” url=”http://java.sun.com/jsp/jstl/core”%>\n<%@ taglib uri=”http://java.sun.com/jsp/jstl/functions” prefix=”fn”%>\n…\n${fn:escapeXml(param.name)}",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "218"
    },
    "123": {
        "question": "secure.xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE foo SYSTEM \"file:/dev/tty\">\n<foo>bar</foo>\nimport javax.xml.parsers.SAXParsers;\nimport javax.xml.parsers.SAXParserFactory;\nclass XXE {\npublic static void main(String[] args)\nthrows FileNotFoundException, ParserConfigurationException, SAXException,\nIOException{\nSAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser saxParser = factory.newSAXParser();\nsaxParser.parse(new FileInputStream(\"secure.xml\"), new DefaultHandler());\n}\n}",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "정탐",
        "guide": "245"
    },
    "124": {
        "question": "[ login.xq ] 파일\ndeclare variable $loginID as xs:string external;\ndeclare variable $password as xs:string external;\nString nm = props.getProperty(\"name\");\nString pw = props.getProperty(\"password\");\nDocument doc = new Builder().build(\"users.xml\");\nXQuery xquery = new XQueryFactory().createXQuery(new File(\"login.xq\"));\nMap vars = new HashMap();\nvars.put(\"loginID\", nm);\nvars.put(\"password\", pw);\nNodes results = xquery.execute(doc, null, vars).toNodes();\nfor (int i=0; i<results.size(); i++) {\nSystem.out.println(results.get(i).toXML());21:\n}",
        "vuln": "XML 삽입",
        "TFpositive": "오탐",
        "guide": "255"
    },
    "125": {
        "question": "<%@ taglib prefix=”c” url=”http://java.sun.com/jsp/jstl/core”%>\n<%@ taglib uri=”http://java.sun.com/jsp/jstl/functions” prefix=”fn”%>\n…\n<c:out value=”${param.name}”/>",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "218"
    },
    "126": {
        "question": "<%\nString date = request.getParameter(“date”);\nString year = date.substring(0, 4);\nString month = date.substring(4, 6);\nString day = date.substring(6, 8);\nout.println(year + “ ” + month + “ ” + day + “ 년 월 일” );\n%>",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "219"
    },
    "127": {
        "question": "public String XPathFilter(String input) {\nif (input != null) return input.replaceAll(\"[',\\\\[]\", \"\");\nelse return \"\";\n}\n......\nString nm = XPathFilter(props.getProperty(\"name\"));\nString pw = XPathFilter(props.getProperty(\"password\"));\n......\nXPathFactory factory = XPathFactory.newInstance();\nXPath xpath = factory.newXPath();\n......\nXPathExpression expr = xpath.compile(\"//users/user[login/text()='\"+nm+\"' and\npassword/text()='\"+pw+\"']/home_dir/text()\");\nObject result = expr.evaluate(doc, XPathConstants.NODESET);\nNodeList nodes = (NodeList) result;\nfor (int i=0; i<nodes.getLength(); i++) {\nString value = nodes.item(i).getNodeValue();\nif (value.indexOf(\">\") < 0) {\nSystem.out.println(value);\n}\n}\n......",
        "vuln": "XML 삽입",
        "TFpositive": "오탐",
        "guide": "256"
    },
    "128": {
        "question": "receivedXML\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n<!ELEMENT foo ANY >\n<!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>\npublic void unmarshal(File receivedXml)\nthrows JAXBException, ParserConfigurationException, SAXException, IOException {\nJAXBContext jaxbContext = JAXBContext.newInstance( Student.class );\nUnmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setNamespaceAware(true);\nDocumentBuilder db = dbf.newDocumentBuilder();\nDocument document = db.parse(receivedXml);\nStudent employee = (Student) jaxbUnmarshaller.unmarshal( document );\n}",
        "vuln": "부적절한 XML 외부개체 참조",
        "TFpositive": "정탐",
        "guide": "244"
    },
    "129": {
        "question": "Int pageNm = Integer.parseInt(request.getParameter(“pageNm”);\n<input type=text size=10 name=”pageNm” value=’<%=pageNm%>’ />",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "219"
    },
    "130": {
        "question": "var CompPath = “%XPLATFORM%\\\\” + sKey + “\\\\component”;\n//XLauncher.componentpath = CompPath;\nXLauncher.onlyone = “false”;\nvar iconStr = “<%= request.getRequestURL() %>”;",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "220"
    },
    "131": {
        "question": "public static void main(String[] args) throws Exception {\nif (args.length <= 0) {\nSystem.err.println(\" 가격을 검색할 식품의 이름을 입력하세요.\");\nreturn;\n}\nString name = args[0];\nDocumentBuilder docBuilder\n=DocumentBuilderFactory.newInstance().newDocumentBuilder();\nDocument doc = docBuilder.parse(\"http://www.w3schools.com/xml/simple.xml\");\nXPath xpath = XPathFactory.newInstance().newXPath();\nNodeList nodes = (NodeList) xpath.evaluate(\"//food[name='\" + name + \"']/price\",\ndoc, XPathConstants.NODESET);\nfor (int i = 0; i < nodes.getLength(); i++) {\nSystem.out.println(nodes.item(i).getTextContent());\n}\n}",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "257"
    },
    "132": {
        "question": "<%\n…\nrs = pstmt.executeQuery(query);\nwhile(rs.next()){\nboard_contents = rs.getString(“board_contents”))\n… }\n%>\n…\n<p> 제목 : <%=board_contents%> </p>",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "220"
    },
    "133": {
        "question": "void main(int argc, char* argv[])\n{\nint usr_num = 0;\nchar* num_array[] = {“one”, “two”, “three”, “four”};\nchar* num = NULL;\nusr_num = atoi(argv[1]);\nif (usr_num >= 0 && usr_num < 4) {\nnum = num_array[usr_num];\n}\n}",
        "vuln": "정수형 오버플로우",
        "TFpositive": "오탐",
        "guide": "292"
    },
    "134": {
        "question": "response.sendRedirect(request.getContextPath() + “/login.do”);",
        "vuln": "신뢰되지 않는 URL 주소로 자동접속 연결",
        "TFpositive": "오탐",
        "guide": "243"
    },
    "135": {
        "question": "g1 = new WKTReader().read(geometryParam);\np1 = (Polygon) g1.buffer(Double.parseDouble(bufferSizeParam));\nresponse.setContentType(“text/plain;charset=EUC-KR”);\nresponse.setHeader(“Cache-Control”, “no-cache”);\nresponse.getWriter().write(p1.toText());",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "219"
    },
    "136": {
        "question": "public static void main(String[] args) throws Exception {\nif (args.length <= 0) {\nSystem.err.println(\" 가격을 검색할 식품의 이름을 입력하세요.\");\nreturn;\n}\nString name = args[0];\nif (name != null) {\nname = name.replaceAll(\"[()\\\\-'\\\\[\\\\]:,*/]\", \"\");\n}\nDocumentBuilder docBuilder =\nDocumentBuilderFactory.newInstance().newDocumentBuilder();\nDocument doc = docBuilder.parse(\"http://www.w3schools.com/xml/simple.xml\");\nXPath xpath = XPathFactory.newInstance().newXPath();\nNodeList nodes = (NodeList) xpath.evaluate(\"//food[name='\" + name + \"']/price\",\ndoc, XPathConstants.NODESET);\nfor (int i = 0; i < nodes.getLength(); i++) {\nSystem.out.println(nodes.item(i).getTextContent());\n}\n}",
        "vuln": "XML 삽입",
        "TFpositive": "오탐",
        "guide": "257"
    },
    "137": {
        "question": "String exam_tgt_se = request.getParameter(“exam_tgt_se”);\nString mw_take_no = request.getParameter(“mw_take_no”);\nString apv_perm_reg_mgt_no = request.getParameter(“apv_perm_reg_mgt_no”);\nString mw_afr_no = request.getParameter(“mw_afr_no”);\nSystem.out.println(“exam_tgt_se : “ + exam_tgt_se);\nSystem.out.println(“mw_take_no : “ + mw_take_no);\nSystem.out.println(“apv_perm_reg_mgt_no : “ + apv_perm_reg_mgt_no);",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "오탐",
        "guide": "220"
    },
    "138": {
        "question": "<%\nString code = nvl(request.getAttribute(“redirectCode”));\nString action = nvl(request.getAttribute(“action”));\nlogger.debug(“>>> redirectCode - “+ code);\nlogger.debug(“>>> redirectAction –“ + action);\n………\nse.sendRedirect(CP + action + “?redirectCode=” + code);\nreturn;\n%>",
        "vuln": "신뢰되지 않는 URL 주소로 자동접속 연결",
        "TFpositive": "정탐",
        "guide": "242"
    },
    "139": {
        "question": "string acctID = Request[\"acctID\"];\nstring query = null;\nif(acctID != null)\n{\nStringBuffer sb = new StringBuffer(\"/accounts/account[acctID='\");\nsb.Append(acctID);\nsb.Append(\"']/email/text()\");\nquery = sb.ToString();\n}\nXPathDocument docNav = new XPathDocument(myXml);\nXPathNavigator nav = docNav.CreateNavigator();\nnav.Evaluate(query);",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "258"
    },
    "140": {
        "question": "…\n<%\nString name = request.getParameter(“name”);\n%>\n<SCRIPT language=”javascript”>\ndocument.write(“name:” + <%=name%> );",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "221"
    },
    "141": {
        "question": "…\n<%\nString name = request.getParameter(“name”);\nname = name.replaceAll(“<”,”&lt;”);\nname = name.replaceAll(“>”,”&gt;”);\nname = name.replaceAll(“&”,”&amp;”);\nname = name.replaceAll(“””,”&quot;”);\nname = name.replaceAll(“’”,“&#x27;”);\nname = name.replaceAll(“/”,“&#x2F;”);\n%>\n<SCRIPT language=”javascript”>\ndocument.write(“name:” + <%=name%> );",
        "vuln": "크로스사이트 스크립트",
        "TFpositive": "정탐",
        "guide": "221"
    },
    "142": {
        "question": "public void AttackOpenRedirect()\n{\nstring url = Request[\"dest\"];\nif(isLocalUri(url)) Response.Redirect(url);\n}\nprivate bool IsLocalUrl(string url)\n{\nif(string.IsNullOrEmpty(url))\n{\nreturn false;\n}\nUri absoluteUri;\nif(Uri.TryCreate(url, UriKind.Absolute, out absoluteUri))\n{\nreturn String.Equals(this.Request.Url.Host, absoluteUri.Host,\nStringComparison.OrdinalIgnoreCase);\n}\nelse\n{\nbool isLocal = !url.StartsWith(\"http:\",StringComparison.OrdinalIgnoreCase)\n&& !url.StartsWith(\"https:\", StringComparison.OrdinalIgnoreCase)\n&& Uri.IsWellFormedUriString(url, UriKind.Relative);\nreturn isLocal;\n}\n}",
        "vuln": "신뢰되지 않는 URL 주소로 자동접속 연결",
        "TFpositive": "오탐",
        "guide": "241"
    },
    "143": {
        "question": "public static void main(String args[]) throws IOException {\nString cmd = args[0];\nProcess ps = null;\ntry {\nps = Runtime.getRuntime().exec(cmd);\n...",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "정탐",
        "guide": "223"
    },
    "144": {
        "question": "string xpath = \"/accounts/account[@acctID=$acctID]/email/text()\";\nXPathExpression expr = DynamicContext.Compile(xpath);\nDynamicContext ctx = new DynamicContext();\nctx.AddVariable(\"acctID\", AccountIDTextBox.Text);\nexpr.SetContext(ctx);\nXPathNodeIterator data = nav.Select(expr);",
        "vuln": "XML 삽입",
        "TFpositive": "오탐",
        "guide": "259"
    },
    "145": {
        "question": "public class U601 extends HttpServlet {\nprotected void doGet(HttpServletRequest request, HttpServletResponse\nresponse) throws ServletException, IOException {\nString query = request.getQueryString();\nif(query.contains(“url”)) {\nString url = request.getParameter(“url”);\nif(url != null) {\nurl = url.replaceAll(“\\r”,””).replaceAll(“\\n”,””);\nresponse.sendRedirect(url);\n}\n}\n}\n}",
        "vuln": "신뢰되지 않는 URL 주소로 자동접속 연결",
        "TFpositive": "정탐",
        "guide": "242"
    },
    "146": {
        "question": "void main(int argc, char* argv[])\n{\nint usr_num = 0;\nchar* num_array[] = {“one”, “two”, “three”, “four”};\nchar* num = NULL;\nusr_num = atoi(argv[1]);\nnum = num_array[usr_num];\n}",
        "vuln": "정수형 오버플로우",
        "TFpositive": "정탐",
        "guide": "292"
    },
    "147": {
        "question": "…\nString name = props.getProperty(“name”);\nHashtable env = new Hashtable();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, “com.sun.jndi.ldap.LdapCtxFactory”);\nenv.put(Context.PROVIDER_URL, “ldap://localhost:389/o=rootDir”);\njavax.naming.directory.DirContext ctx = new InitialDirContext(env);\njavax.xml.xquery.XQDataSource xqds = (javax.xml.xquery.XQDataSource)\nctx.lookup(“x- qj/personnel”);\njavax.xml.xquery.XQConnection conn = xqds.getConnection();\nString es = “doc(‘users.xml’)/userlist/user[uname=’” + name + “’]”;\nXQPreparedExpression expr = conn.prepareExpression(es);\nXQResultSequence result = expr.executeQuery();\nwhile (result.next()) {\nString str = result.getAtomicValue();\nif (str.indexOf(‘>’) < 0) {\nSystem.out.println(str);\n}\n…",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "259"
    },
    "148": {
        "question": "string url = Request[\"dest\"];\nResponse.Redirect(url);",
        "vuln": "신뢰되지 않는 URL 주소로 자동접속 연결",
        "TFpositive": "정탐",
        "guide": "241"
    },
    "149": {
        "question": "public static void Main(string[] args)\n{\nint usrNum = Int32.Parse(args[0]);\nstring[] array = {\"one\", \"two\", \"three\", \"four\"};\nstring num = array[usrNum];\n}",
        "vuln": "정수형 오버플로우",
        "TFpositive": "정탐",
        "guide": "291"
    },
    "150": {
        "question": "…\nString name = props.getProperty(“name”);\nHashtable env = new Hashtable();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, “com.sun.jndi.ldap.LdapCtxFactory”);\nenv.put(Context.PROVIDER_URL, “ldap://localhost:389/o=rootDir”);\njavax.naming.directory.DirContext ctx = new InitialDirContext(env);\njavax.xml.xquery.XQDataSource xqds = (javax.xml.xquery.XQDataSource)\nctx.lookup(“x- qj/personnel”);\njavax.xml.xquery.XQConnection conn = xqds.getConnection();\nString es = “doc(‘users.xml’)/userlist/user[uname=’” + name + “’]”;\nXQPreparedExpression expr = conn.prepareExpression(es);\nXQResultSequence result = expr.executeQuery();\nwhile (result.next()) {\nString str = result.getAtomicValue();\nif (str.indexOf(‘>’) < 0) {\nSystem.out.println(str);\n}\n…",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "260"
    },
    "151": {
        "question": "…\nString acctID = request.getParameter(“acctID”);\nString query = null;\nif(acctID != null) {\nStringBuffer sb = new StringBuffer(“/accounts/account[acctID=’”);\nsb.append(acctID);\nsb.append(“’]/email/text()”);\nquery = sb.toString();\n}\nDocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();\ndomFactory.setNamespaceAware(true);\nDocumentBuilder builder = domFactory.newDocumentBuilder();\nDocument doc = builder.parse(“accounts.xml”);\nXPathFactory factory = XPathFactory.newInstance();\nXPath xpath = factory.newXPath();\nXPathExpression expr = xpath.compile(query);\nObject result = expr.evaluate(doc, XPathConstants.NODESET);\n…",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "261"
    },
    "152": {
        "question": "public static void main(String args[]) throws IOException {\nList<String> allowedCommands = new ArrayList<String>();\nallowedCommands.add(\"notepad\");\nallowedCommands.add(\"calc\");\nString cmd = args[0];\nif (!allowedCommands.contains(cmd)) {\nSystem.err.println(\" 허용되지 않은 명령어입니다.\");\nreturn;\n}\nProcess ps = null;\ntry {\nps = Runtime.getRuntime().exec(cmd);\n......",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "오탐",
        "guide": "224"
    },
    "153": {
        "question": "…\nString name = props.getProperty(“name”);\nString passwd = props.getProperty(“password”);\n…\nXPathFactory factory = XPathFactory.newInstance();\nXPath xpath = factory.newXPath();\n…\nXPathExpression expr = xpath.compile(“//users/user[login/text()=’” + name + “’ and\npassword/text() = ‘” + passwd + “’]/home_dir/text()”);\nObject result = expr.evaluate(doc, XPathConstants.NODESET);\nNodeList nodes = (NodeList) result;\nfor (int i = 0; i < nodes.getLength(); i++) {\nString value = nodes.item(i).getNodeValue();\nif (value.indexOf(“>”) < 0) {\nSystem.out.println(value);\n}\n…",
        "vuln": "XML 삽입",
        "TFpositive": "정탐",
        "guide": "262"
    },
    "154": {
        "question": "String date = request.getParameter(\"date\");\nString command = new String(\"cmd.exe /c backuplog.bat\");\ndate = date.replaceAll(\"|\",\"\");\ndate = date.replaceAll(\";\",\"\");\ndate = date.replaceAll(\"&\",\"\");\ndate = date.replaceAll(\":\",\"\");\ndate = date.replaceAll(\">\",\"\");\nRuntime.getRuntime().exec(command + date);",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "오탐",
        "guide": "225"
    },
    "155": {
        "question": "String allowedUrl[] = { \"/main.do\", \"/login.jsp\", \"list.do\" };\n......\nString rd = request.getParameter(\"redirect\");\ntry {\nrd = allowedUrl[Integer.parseInt(rd)];\n} catch(NumberFormatException e) {\nreturn \" 잘못된 접근입니다.\";\n} catch(ArrayIndexOutOfBoundsException e) {\nreturn \" 잘못된 입력입니다.\";\n}\nif (id.length() > 0) {\n......\nif (\"0\".equals(rs.getString(1)) && \"01AD\".equals(bn)) {\nresponse.sendRedirect(rd);\nreturn;\n}",
        "vuln": "신뢰되지 않는 URL 주소로 자동접속 연결",
        "TFpositive": "오탐",
        "guide": "240"
    },
    "156": {
        "question": "private void searchRecord(String userSN, String userPassword) throws\nNamingException {\nHashtable<String, String> env = new Hashtable<String, String>();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\ntry {\nDirContext dctx = new InitialDirContext(env);\nSearchControls sc = new SearchControls();\nString[] attributeFilter = { \"cn\", \"mail\" };\nsc.setReturningAttributes(attributeFilter);\nsc.setSearchScope(SearchControls.SUBTREE_SCOPE);\nString base = \"dc=example,dc=com\";\nString filter = \"(&(sn=\" + userSN + \")(userPassword=\" + userPassword + \"))\";\nNamingEnumeration<?> results = dctx.search(base, filter, sc);\nwhile (results.hasMore()) {\nSearchResult sr = (SearchResult) results.next();\nAttributes attrs = sr.getAttributes();\nAttribute attr = attrs.get(\"cn\");\n......\n}\ndctx.close();\n} catch (NamingException e) { … }\n}",
        "vuln": "LDAP 삽입",
        "TFpositive": "정탐",
        "guide": "264"
    },
    "157": {
        "question": "private void searchRecord(String userSN, String userPassword) throws NamingException\n{\nHashtable<String, String> env = new Hashtable<String, String>();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\ntry {\nDirContext dctx = new InitialDirContext(env);\nSearchControls sc = new SearchControls();\nString[] attributeFilter = {\"cn\", \"mail\" };\nsc.setReturningAttributes(attributeFilter);\nsc.setSearchScope(SearchControls.SUBTREE_SCOPE);\nString base = \"dc=example,dc=com\";\nif (!userSN.matches(\"[\\\\w\\\\s]*\") || !userPassword.matches(\"[\\\\w]*\")) {\nthrow new IllegalArgumentException(\"Invalid input\");\n}\nString filter = \"(&(sn=\" + userSN + \")(userPassword=\" + userPassword + \"))\";\nNamingEnumeration<?> results = dctx.search(base, filter, sc);\nwhile (results.hasMore()) {\nSearchResult sr = (SearchResult) results.next();\nAttributes attrs = sr.getAttributes();\nAttribute attr = attrs.get(\"cn\");\n......\n}\ndctx.close();\n} catch (NamingException e) { … }\n}",
        "vuln": "LDAP 삽입",
        "TFpositive": "오탐",
        "guide": "265"
    },
    "158": {
        "question": "String date = request.getParameter(\"date\");\nString command = new String(\"cmd.exe /c backuplog.bat\");\nRuntime.getRuntime().exec(command + date);",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "정탐",
        "guide": "224"
    },
    "159": {
        "question": "String id = (String)session.getValue(\"id\");\nString bn = request.getParameter(\"gubun\");\nString rd = request.getParameter(\"redirect\");\nif (id.length() > 0) {\nString sql = \"select level from customer where customer_id = ? \";\nconn = db.getConnection();\npstmt = conn.prepareStatement(sql);\npstmt.setString(1, id);\nrs = pstmt.executeQuery();\nrs.next();\nif (\"0\".equals(rs.getString(1)) && \"01AD\".equals(bn)) {\nresponse.sendRedirect(rd);\nreturn;\n}",
        "vuln": "신뢰되지 않는 URL 주소로 자동접속 연결",
        "TFpositive": "정탐",
        "guide": "239"
    },
    "160": {
        "question": "static void SearchRecord(string userSN, string userPW)\n{\ntry {\nDirectoryEntry oDE;\noDE = new DirectoryEntry(GetStrPath());\nforeach(DirectoryEntry objChildDE om oDE.Children) {\n...\n}\n} catch (NamingException e) { ... }\n}",
        "vuln": "LDAP 삽입",
        "TFpositive": "정탐",
        "guide": "266"
    },
    "161": {
        "question": "static void SearchRecord(string userSN, string userPW)\n{\ntry {\nDirectoryEntry oDE;\noDE = new DirectoryEntry(GetStrPath(), userSN, userPW);\nforeach(DirectoryEntry objChildDE om oDE.Children) {\n...\n}\n} catch (NamingException e) { ... }",
        "vuln": "LDAP 삽입",
        "TFpositive": "오탐",
        "guide": "267"
    },
    "162": {
        "question": "string fileName = PgmTextBox.Text;\nProcessStartInfo proStartInfo = new ProcessStartInfo();\nproStartInfo.FileName = fileName;\nProcess.Start(proStartInfo);",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "정탐",
        "guide": "225"
    },
    "163": {
        "question": "string fileName = PgmTextBox.Text;\nif (Regex.IsMatch(fileName, \"properRegexHere\"))\n{\nProcessStartInfo proStartInfo = new ProcessStartInfo();\nproStartInfo.FileName = fileName;\nProcess.Start(proStartInfo);\n}",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "오탐",
        "guide": "225"
    },
    "164": {
        "question": "public static void Main(string[] args)\n{\ntry{\nint usrNum = checked(Int32.Parse(args[0]));\nstring[] array = {\"one\", \"two\", \"three\", \"four\"};\nif(usrNum < 3)string num = array[usrNum];\n}\ncatch (System.OverflowException e) { … }\n}",
        "vuln": "정수형 오버플로우",
        "TFpositive": "오탐",
        "guide": "292"
    },
    "165": {
        "question": "if (!””.equals(file.getOriginalFilename())) {\nzipManageService.insertExcelZip(file.getInputStream());",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "오탐",
        "guide": "238"
    },
    "166": {
        "question": "void LDAPInjection() {\nchar *filter = getenv(“Filter”);\nint error_code;\nLDAP *ld = NULL;\nLDAPMessage *result;\nerror_code = ldap_search_ext_s(ld, FIND_DN, LDAP_SCOPE_BASE, filter,\nNULL, 0, NULL, NULL, LDAP_NO_LIMIT, LDAP_NO_LIMIT, &result);\n}",
        "vuln": "LDAP 삽입",
        "TFpositive": "정탐",
        "guide": "267"
    },
    "167": {
        "question": "void LDAPInjection() {\nchar *filter = getenv(“Filter”);\nint error_code;\nint i;\nLDAP *ld = NULL;\nLDAPMessage *result;\nfor(i = 0; *(filter + i) != 0; i++) {\nswitch(*(filter + i)) {\ncase ‘*’:\ncase ‘(’:\ncase ‘)’:\n…\nreturn;\n}\n}\nerror_code = ldap_search_ext_s(ld, FIND_DN, LDAP_SCOPE_BASE, filter,\nNULL, 0, NULL, NULL, LDAP_NO_LIMIT, LDAP_NO_LIMIT, &result);",
        "vuln": "LDAP 삽입",
        "TFpositive": "오탐",
        "guide": "268"
    },
    "168": {
        "question": "int main(int argc, char* argv[]) {\nchar cmd[CMD_LENGTH];\nif (argc < 1 ) {\n// error\n}\ncmd_data = argv[1];\nsnprintf(cmd, CMD_LENGTH, “cat %s”, cmd_data);\nsystem(cmd);\n……\n}",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "정탐",
        "guide": "226"
    },
    "169": {
        "question": "String orginFileName = file.getOriginalFilename();\n//--------------------------------------\n// ( input file type) 첨부가 되지 않은\n//--------------------------------------\n////------------------------------------\n//String fileName = orginFileName.substring(0, index);\nString fileExt = orginFileName.substring(index + 1);\nfor(Object fileExclusionExt : this.fileExclusionExtension) {\nif( ((String) fileExclusionExt).equals(fileExt.toLowerCase())){\nthrow new Exception(“egume.message.error.file.exclusion.extension”);\n}\n}",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "오탐",
        "guide": "237"
    },
    "170": {
        "question": "…DirContext ctx = new InitialDirContext(env);\nString managerName = request.getParameter(“managerName”);\nString filter = “(manager=” + managerName + “)”;\nNamingEnumeration employees =\nctx.search(“ou=People,dc=example,dc=com”, filter);\n…",
        "vuln": "LDAP 삽입",
        "TFpositive": "정탐",
        "guide": "268"
    },
    "171": {
        "question": "public void f() {\nHashtable env = new Hashtable();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, “com.sun.jndi.ldap.LdapCtxFactory”);\nenv.put(Context.PROVIDER_URL, “ldap://localhost:389/o=rootDir”);\ntry {\njavax.naming.directory.DirContext ctx = new InitialDirContext(env);\nProperties props = new Properties();\nString fileName = “ldap.properties”;\nFileInputStream in = new FileInputStream(fileName);\nprops.load(in);\nString name = props.getProperty(“name”);\nString filter = “(name =” + name + “)”;\nNamingEnumeration answer = ctx.search(“ou=NewHires”, filter, new SearchControls(\n));\nprintSearchEnumeration(answer);\nctx.close();\n}\ncatch (NamingException e) { … }\n…",
        "vuln": "LDAP 삽입",
        "TFpositive": "정탐",
        "guide": "269"
    },
    "172": {
        "question": "int main(int argc, char* argv[]) {\nchar cmd[CMD_LENGTH];\nint len = 0;\n: if (argc < 1 ) {\n// error\n}\ncmd_data = argv[1];\nlen = strlen(cmd_data);\nfor (int i = 0; I < len; i++) {\nif (cmd_data[i] == ‘|’ || cmd_data[i] == ‘&’ ||\ncmd_data[i] == ‘;’ || cmd_data[i] == ‘:’ || cmd_data[i] == ‘>’) {\nreturn -1;\n}\n}\nsnprintf(cmd, CMD_LENGTH, “cat %s”, cmd_data);\nsystem(cmd);\n……\n}",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "오탐",
        "guide": "226"
    },
    "173": {
        "question": "…\ntry {\n…\nString name = props.getProperty(““ldap.properties”);\nBasicAttribute attr = new BasicAttribute(“name”, name);\nNamingEnumeration answer = ctx.search(“ou=NewHires”, attr.getID(), new Search2513 Controls());\nprintSearchEnumeration(answer);\nctx.close();\n}\ncatch (NamingException e) { … }\n}\npublic void printSearchEnumeration(NamingEnumeration value) {\ntry {\nwhile (value.hasMore()) {\nSearchResult sr = (SearchResult) value.next();\nSystem.out.println(“>>>” + sr.getName() + “\\n” + sr.getAttributes());\n}\n}\ncatch (NamingException e) { … }\n…",
        "vuln": "LDAP 삽입",
        "TFpositive": "정탐",
        "guide": "270"
    },
    "174": {
        "question": "…\nString fileName = file.getOriginalFilename();\nif ( fileName != null ) {\nif ( !fileName.endsWith(“.jsp”) ) {\n/* file */ 업로드 루틴\n}\n}\n…",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "정탐",
        "guide": "237"
    },
    "175": {
        "question": "session.setAttribute(\"SESSION_CSRF_TOKEN\", UUID.randomUUID().toString());\n<input type=\"hidden\" name=\"param_csrf_token\" value=\"${SESSION_CSRF_TOKEN}\" />\nString pToken = request.getParameter(\"param_csrf_token\");\nString sToken = (String)session.getAttribute(\"SESSION_CSRF_TOKEN\");\nif (pToken != null && pToken.equals(sToken) {\n......\n} else {\n......\n}",
        "vuln": "크로스사이트 요청 위조",
        "TFpositive": "오탐",
        "guide": "273"
    },
    "176": {
        "question": "public void f() throws IOException {\nProperties props = new Properties();\nString fileName = “file_list”;\nFileInputStream in = new FileInputStream(fileName);\nprops.load(in);\nString version = props.getProperty(“dir_type”)\nString cmd = new String(“cmd.exe /c rmanDB.bat “);\nRuntime.getRuntime().exec(cmd + “c:\\\\prog_cmd\\\\” + version);\n}",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "정탐",
        "guide": "227"
    },
    "177": {
        "question": "< EgovProcessMonController.java >\n@RequestMapping(“/utl/sys/prm/selectProcessSttus.do”)\npublic String selectProcessSttus(@ModelAttribute(“processMonVO”) ProcessMonVO\nprocessMonVO, ModelMap model) throws Exception {\n…\n}\n< ProcessMonChecker.java >\npublic staticString getProcessId(String processNm) throws Exception {\nProcess p = null;\nString procsSttus = null;\nBufferedReader buf = null;\nString result = null;\nString execStr = “tasklist /fo table /nh /fi \\”imagename eq “+processNm+”\\””;\nint cnt = 0;\nString str = null;\ntry {\nif (Globals.OS_TYPE == null) {\nthrow new RuntimeException(“Globals.OS_TYPE property value is needed”);\n}\nif (“WINDOWS”.equals(Globals.OS_TYPE)) {\ncnt = -1;\np = Runtime.getRuntime().exec(execStr);\n}\n}",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "정탐",
        "guide": "228"
    },
    "178": {
        "question": "while (itr.hasNext()) {\nEntry<String, List<MultipartFile>> entry = itr.next();\nfileList = entry.getValue();\nfor(int i=0, s=fileList.size(); i<s; i++) {\nfile = (MultipartFile)fileList.get(i);\nString orginFileName = file.getOriginalFilename();\n//--------------------------------------\n////------------------------------------\nint index = orginFileName.lastIndexOf(“.”);\n//String fileName = orginFileName.substring(0, index);\nString fileExt = orginFileName.substring(index + 1);\nString newName = KeyStr + EgovStringUtil.getTimeStamp() + fileKey;\nlong _size = file.getSize();\nif (!””.equals(orginFileName)) {\nfilePath = storePathString + File.separator + newName;\nfile.transferTo(new File(filePath));\n}\nfvo = new FileVO();\nfvo.setFileExtsn(fileExt);\nfvo.setFileStreCours(storePathString);\nfvo.setFileMg(Long.toString(_size));\nfvo.setOrignlFileNm(orginFileName);\nfvo.setStreFileNm(newName);\nfvo.setAtchFileId(atchFileIdString);\nfvo.setFileSn(String.valueOf(fileKey));\n//writeFile(file, newName, storePathString);\nresult.add(fvo);\nfileKey++;\n}\n}\nreturn result;",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "정탐",
        "guide": "235"
    },
    "179": {
        "question": "public static floatgetMoryFreeCpcty() throws Exception {\nfloat cpcty = 0;\nProcess p = null;\ntry {\nString cmdStr = EgovProperties.getPathProperty(Globals.SERVER_CONF_PATH,\n“SHELL.”+Globals.OS_TYPE+”.getMoryInfo”);\nString[] command = {cmdStr.replace(‘\\\\’, FILE_SEPARATOR).replace(‘/’,\nFILE_SEPARATOR),”\nFREE“}\n}\np = Runtime.getRuntime().exec(command);",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "오탐",
        "guide": "229"
    },
    "180": {
        "question": "string fn = Path.GetFileName(FileUploadCtr.FileName);\nFileUploadCtr.SaveAs(fn);\nStatusLabel.Text = \"Upload status: File uploaed!\";",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "정탐",
        "guide": "234"
    },
    "181": {
        "question": "MultipartRequest multi\n= new MultipartRequest(request,savePath,sizeLimit,\"euc-kr\",new\nDefaultFileRenamePolicy());\n......\nString fileName = multi.getFilesystemName(\"filename\");\n......\nsql = \" INSERT INTO board(email,r_num,w_date,pwd,content,re_step,re_num,filename)\n\"+ \" values ( ?, 0, sysdate(), ?, ?, ?, ?, ? ) \";\nPreparedStatement pstmt = con.prepareStatement(sql);\npstmt.setString(1, stemail);\npstmt.setString(2, stpwd);\npstmt.setString(3, stcontent);\npstmt.setString(4, stre_step);\npstmt.setString(5, stre_num);\npstmt.setString(6, fileName);\npstmt.executeUpdate();\nThumbnail.create(savePath+\"/\"+fileName, savePath+\"/\"+\"s_\"+fileName, 150);",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "정탐",
        "guide": "232"
    },
    "182": {
        "question": "MultipartRequest multi\n= new MultipartRequest(request,savePath,sizeLimit,\"euc-kr\",new\nDefaultFileRenamePolicy());\n......\nString fileName = multi.getFilesystemName(\"filename\");\nif (fileName != null) {\nString fileExt = FileName.substring(fileName.lastIndexOf(\".\")+1).toLowerCase();\nif (!\"gif\".equals(fileExt) && !\"jpg\".equals(fileExt) && !\"png\".equals(fileExt)) {\nalertMessage(\" 업로드 불가능한 파일입니다.\");\nreturn;\n}\n}\n......\nsql = \" INSERT INTO board(email,r_num,w_date,pwd,content,re_step,re_num,filename)\n“ + \" values ( ?, 0, sysdate(), ?, ?, ?, ?, ? ) \";\nPreparedStatement pstmt = con.prepareStatement(sql);\n......\nThumbnail.create(savePath+\"/\"+fileName, savePath+\"/\"+\"s_\"+fileName, 150);",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "오탐",
        "guide": "233"
    },
    "183": {
        "question": "if (FileUploadCtr.PostedFile.ContentType == \"image/jpeg\")\n{\nif (FileUploadCtr.PostedFile.ContentLength < 102400)\n{\nstring fn = Path.GetFileName(FileUploadCtr.FileName);\nFileUploadCtr.SaveAs(Server.MapPath(\"~/\") + fn);\nStatusLabel.Text = \"Upload status: File uploaed!\";\n}\nelse\nStatusLabel.Text = \"Upload Status: The File has to be less than 100 kb!\";\n}\nelse\nStatusLabel.Text = \"Upload Status: Only JPEG files are accepted!\";",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "오탐",
        "guide": "234"
    },
    "184": {
        "question": "public static String getOwner(String file) throws Exception{\nString owner = “”;\nString src = file.replace(‘\\\\’, FILE_SEPARATOR).replace(‘/’, FILE_SEPARATOR);\nBufferedReader b_err=null;\nBufferedReader b_out=null;\ntry {\nFile srcFile = newFile(src);\nif (srcFile.exists()) {\nString parentPath = srcFile.getParent();\nString fname = srcFile.getName();\nProcess p = null;\nString cmdStr = EgovProperties.getProperty(Globals.SHELL_FILE_PATH,\n“SHELL.”+Globals.OS_TYPE+”.getDrctryOwner”);\nString[] command = {cmdStr.replace(‘\\\\’, FILE_SEPARATOR).replace(‘/’,\nFILE_SEP- ARATOR), parentPath.replace(‘\\\\’, FILE_SEPARATOR).replace(‘/’,\nFILE_SEPARATOR), fname};\np = Runtime.getRuntime().exec(command);\n}\n}\n}",
        "vuln": "운영체제 명령어 삽입",
        "TFpositive": "오탐",
        "guide": "230"
    },
    "185": {
        "question": "public void upload(HttpServletRequest request) throws ServletException {\nMultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;\nString next = (String) mRequest.getFileNames().next();\nMultipartFile file = mRequest.getFile(next);\nString fileName = file.getOriginalFilename();\nFile uploadDir = new File(“/app/webapp/data/upload/notice”);\nString uploadFilePath = uploadDir.getAbsolutePath()+”/”+fileName;\n}\n}",
        "vuln": "위험한 형식 파일 업로드",
        "TFpositive": "정탐",
        "guide": "235"
    },
    "186": {
        "question": "@RequestMapping(value = \"/modify.do\", method = RequestMethod.POST)\npublic ModelAndView memberModifyProcess(@ModelAttribute(\"MemberModel\")\nMemberModel memberModel, BindingResult result, HttpServletRequest request,\nHttpSession session) {\nModelAndView mav = new ModelAndView();\nString userId = (String) session.getAttribute(\"userId\");\nString passwd = request.getParameter(\"oldUserPw\");\n...\nif (service.modifyMember(memberModel)) {\nmav.setViewName(\"redirect:/board/list.do\");\nsession.setAttribute(\"userName\", memberModel.getUserName());\nreturn mav;\n} else {\nmav.addObject(\"errCode\", 2);\nmav.setViewName(\"/board/member_modify\");\nreturn mav;\n}\n}",
        "vuln": "적절한 인증 없는 중요기능 허용",
        "TFpositive": "정탐",
        "guide": "314"
    },
    "187": {
        "question": "String id = request.getParameter(\"id\");\nString pwd = request.getParameter(\"pwd\");\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nmd.reset();\nmd.update(salt);\nbyte[] hashInBytes = md.digest(pwd.getBytes());\nStringBuilder sb = new StringBuilder();\nfor (byte b : hashInBytes) {\nsb.append(String.format(\"%02x\", b));\n}\npwd = sb.toString();\n......\nString sql = \" insert into customer(id, pwd, name, ssn, zipcode, addr)“\n+ \" values (?, ?, ?, ?, ?, ?)\";\nPreparedStatement stmt = con.prepareStatement(sql);\nstmt.setString(1, id);\nstmt.setString(2, pwd);\n......\nstmt.executeUpdate();",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "오탐",
        "guide": "338"
    },
    "188": {
        "question": ": public void f(String sSingleId, int iFlag, String sServiceProvider, String sUid,\nString\nsPwd) {\n…\nenv.put(Context.INITIAL_CONTEXT_FACTORY, CommonMySingleConst.INITCTX);\nenv.put(Context.PROVIDER_URL, sServiceProvider);\nenv.put(Context.SECURITY_AUTHENTICATION, “none”);\nenv.put(Context.SECURITY_PRINCIPAL, sUid);\nenv.put(Context.SECURITY_CREDENTIALS, sPwd);\n…\n}",
        "vuln": "부적절한 인가",
        "TFpositive": "정탐",
        "guide": "323"
    },
    "189": {
        "question": "URL[] classURLs = new URL[] { new URL(\"file:subdir/\") };\nURLClassLoader loader = new URLClassLoader(classURLs);\nClass loadedClass = Class.forName(\"LoadMe\", true, loader);",
        "vuln": "무결성 검사 없는 코드 다운로드",
        "TFpositive": "정탐",
        "guide": "394"
    },
    "190": {
        "question": "MessageDigest digest = MessageDigest.getInstance(“SHA-512”);\ndigest.reset();\nreturn digest.digest(password.getBytes(“UTF-8”));",
        "vuln": "솔트 없이 일방향 해쉬 함수 사용",
        "TFpositive": "정탐",
        "guide": "393"
    },
    "191": {
        "question": "String id = request.getParameter(\"id\");\nString pwd = request.getParameter(\"pwd\");\n......\nString sql = \" insert into customer(id, pwd, name, ssn, zipcode, addr)“\n+ \" values (?, ?, ?, ?, ?, ?)\";\nPreparedStatement stmt = con.prepareStatement(sql);\nstmt.setString(1, id);\nstmt.setString(2, pwd);\n......\nstmt.executeUpdate();",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "337"
    },
    "192": {
        "question": "String jarFile = \"./download/util.jar\";\nbyte[] loadFile = FileManager.getBytes(jarFile);\nloadFile = encrypt(loadFile, privateKey);\nFileManager.createFile(loadFile, jarFileName);\nURL[] classURLs = new URL[] { new URL(\"http://filesave.com/download/util.jar\") };\nURLConnection conn = classURLs.openConnection();\nInputStream is = conn.getInputStream();\nFileOutputStream fos = new FileOutputStream(new File(jarFile));\nWhile (is.read(buf) != -1) {\n......\n}\nbyte[] loadFile = FileManager.getBytes(jarFile);\nloadFile = decrypt(loadFile, publicKey);\nFileManager.createFile(loadFile, jarFile);\nURLClassLoader loader = new URLClassLoader(classURLs);\nClass loadedClass = Class.forName(\"MyClass\", true, loader);",
        "vuln": "무결성 검사 없는 코드 다운로드",
        "TFpositive": "오탐",
        "guide": "395"
    },
    "193": {
        "question": "void GenerateHash(char* data, char* salt)\n{\nchar hashedData[512] = {0};\nMD5HashAlgorithm( data, hashedData, salt );\n...\n}",
        "vuln": "솔트 없이 일방향 해쉬 함수 사용",
        "TFpositive": "오탐",
        "guide": "392"
    },
    "194": {
        "question": "public String doSometing(HttpServletRequest request, HttpServletResponse response,\nHttpSession session) {\nString action= request.getParameter(“action”);\nUser user= (User)session.getAttribute(“user”);\nif (action != null && action.equals(“delete”) && checkAccessControlList(user,action))\n{\n// . 삭제작업을 수행한다\n}\n}",
        "vuln": "부적절한 인가",
        "TFpositive": "오탐",
        "guide": "323"
    },
    "195": {
        "question": "public override bool DownloadFile()\n{\nvar url = \"https://www.somewhere.untrusted.com\";\nvar desDir = \"D:/DestinationPath\";\nstring fileName = Path.GetFileName(url);\nstring descFilePath = Path.Combine(desDir, fileName);\ntry\n{\nWebRequest myre = WebRequest.Create(url);\n}\ncatch (Exception ex)\n{\nthrow new Exception(ex.Message);\n}\ntry\n{\nbyte[] fileData;\nusing (WebClient client = new WebClient())\n{\nfileData = client.DownloadData(url);\n}\nusing (FileStream fs = new FileStream(descFilePath,\nFileMode.OpenOrCreate))\n{\nfs.Write(fileData, 0, fileData.Length);\n}\nreturn true;\n}\ncatch (Exception ex)\n{\nthrow new Exception(ex.Message);\n}\n}",
        "vuln": "무결성 검사 없는 코드 다운로드",
        "TFpositive": "정탐",
        "guide": "395"
    },
    "196": {
        "question": "namespace Security\n{\npublic class FindPassword : System.Web.UI.Page\n{\nprotected void Page_Load(object sender, EventArgs e)\n{\nvar userId = \"tmp\";\nMembershipUser user = Membership.GetUser(userId);\nif (user != null)\n{\nvar password = user.GetPassword();\nResponse.Write(password);\n}\nelse\n{\nResponse.Write(\"the given userId is not valid\");\n}\n}\n}\n}",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "338"
    },
    "197": {
        "question": "void GenerateHash(char* data)\n{\nchar[512] hashedData = {0};\nMD5HashAlgorithm( data, hashedData, NULL );\n...",
        "vuln": "솔트 없이 일방향 해쉬 함수 사용",
        "TFpositive": "정탐",
        "guide": "392"
    },
    "198": {
        "question": "public override bool DownloadFile()\n{\nvar url = \"https://www.somewhere.untrusted.com\";\nvar desDir = \"D:/DestinationPath\";\nstring fileName = Path.GetFileName(url);\nstring descFilePath = Path.Combine(desDir, fileName);\ntry\n{\nWebRequest myre = WebRequest.Create(url);\n}\ncatch (Exception ex)\n{\nthrow new Exception(ex.Message);\n}\ntry\n{\nbyte[] fileData;\nusing (WebClient client = new WebClient())\n{\nfileData = client.DownloadData(url);\n}\nCheckIntegrity(fileData);\nusing (FileStream fs = new FileStream(descFilePath,\nFileMode.OpenOrCreate))\n{\nfs.Write(fileData, 0, fileData.Length);\n}\nreturn true;\n}\ncatch (Exception ex)\n{\nthrow new Exception(ex.Message);\n}\n}",
        "vuln": "무결성 검사 없는 코드 다운로드",
        "TFpositive": "오탐",
        "guide": "396"
    },
    "199": {
        "question": "@RequestMapping(value = \"/modify.do\", method = RequestMethod.POST)\npublic ModelAndView memberModifyProcess(@ModelAttribute(\"MemberModel\")\nMemberModel memberModel, BindingResult result, HttpServletRequest request,\nHttpSession session) {\nModelAndView mav = new ModelAndView();\nString userId = (String) session.getAttribute(\"userId\");\nString passwd = request.getParameter(\"oldUserPw\");\nString requestUser = memberModel.getUserId();\nif (userId != null && requestUser != null && !userId.equals(requestUser)) {\nmav.addObject(\"errCode\", 1);\nmav.addObject(\"member\", memberModel);\nmav.setViewName(\"/board/member_modify\");\nreturn mav;\n}\n...\nif (service.modifyMember(memberModel)) {\n...",
        "vuln": "적절한 인증 없는 중요기능 허용",
        "TFpositive": "오탐",
        "guide": "315"
    },
    "200": {
        "question": "namespace Security\n{\npublic class FindPassword : System.Web.UI.Page\n{\nprotected void Page_Load(object sender, EventArgs e)\n{\nvar userId = \"tmp\";\nMembershipUser user = Membership.GetUser(userId);\nif (user != null)\n{\nvar encrypetedPassword = user.GetPassword();\nSecureFindPasswordFunction();\n}\nelse\n{\nResponse.Write(\"the given userId is not valid\");\n}\n}\n}\n}",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "오탐",
        "guide": "339"
    },
    "201": {
        "question": "sKey = new SecretKeySpec( key, “DESede” );",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "오탐",
        "guide": "359"
    },
    "202": {
        "question": "static void HashWithSalt(int saltLength)\n{\nvar bytes = new byte[100];\n(new Random()).NextBytes(bytes);\nvar source = bytes;\nvar sha256 = new SHA256CryptoServiceProvider();\nbyte[] saltBytes = GenerateRandomCryptographicBytes(saltLength);\nList<byte> sourceWithSaltBytes = new List<byte>();\nsourceWithSaltBytes.AddRange(source);\nsourceWithSaltBytes.AddRange(sourceWithSaltBytes);\nsha256.ComputeHash(sourceWithSaltBytes.ToArray());\n}",
        "vuln": "솔트 없이 일방향 해쉬 함수 사용",
        "TFpositive": "오탐",
        "guide": "392"
    },
    "203": {
        "question": "private static final String JDBC_DRIVER = “org.gjt.mm.mysql.Driver”;\nprivate static final String JDBC_URL = “jdbc:mysql://192.168.200.24:1621/com”;\nprivate static final String JDBC_USER = “com”;\nprivate static final String JDBC_PASSWORD = “com01”;\n...\npublic Connection DBConnect(String url, String id) {\ntry {\nconn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);\n} catch (SQLException e) {\nSystem.err.println(“…”);\n}\nreturn conn;\n}",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "357"
    },
    "204": {
        "question": "public class U321 {\npublic void foo(String url, String usr) {\ntry {\nString encryptedPwd = getpassword();\nbyte[] privateKey = { ‘6’, ‘8’, ‘a’, ‘f’, ‘4’, ‘0’, ‘4’, ‘b’, ‘5’, ‘1’, ‘3’, ‘0’,\n‘7’ };\njavax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(“RSA”);\njavax.crypto.SecretKey myDesKey = new javax.crypto.spec.SecretKeySpec(privateKey,\n“DES”);\ncipher.init(javax.crypto.Cipher.DECRYPT_MODE, myDesKey);\nbyte[] plainTextPwdBytes = cipher.doFinal(encryptedPwd.getBytes());\njava.sql.DriverManager.getConnection(url, usr, new String(plainTextPwdBytes));\n} catch (SQLException e) {\n…",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "358"
    },
    "205": {
        "question": "void foo(){\n/* ... */\nhFile = CreateFile((LPCWSTR)data,GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,\nFILE_ATTRIBUTE_NORMAL, NULL);\nInternetQueryDataAvailable(m_hURL, &dwSize,0,0);\nInternetReadFile(m_hURL, lpBuffer, dwSize, &dwRead);\nWriteFile(hFile, lpBuffer, dwRead, &dwWritten, NULL);\n/* ... */",
        "vuln": "무결성 검사 없는 코드 다운로드",
        "TFpositive": "정탐",
        "guide": "398"
    },
    "206": {
        "question": "public static final String ALGORITHM = \"RSA\";\npublic static final String PRIVATE_KEY_FILE = \"C:/keys/private.key\";\npublic static final String PUBLIC_KEY_FILE = \"C:/keys/public.key\";\npublic static void generateKey() {\ntry {\nfinal KeyPairGenerator keyGen = KeyPairGenerator.getInstance(ALGORITHM);\nkeyGen.initialize(1024);\nfinal KeyPair key = keyGen.generateKeyPair();\nFile privateKeyFile = new File(PRIVATE_KEY_FILE);\nFile publicKeyFile = new File(PUBLIC_KEY_FILE);",
        "vuln": "충분하지 않은 키 길이 사용",
        "TFpositive": "정탐",
        "guide": "360"
    },
    "207": {
        "question": "File file = new File(\"/home/setup/system.ini\");\nfile.setExecutable(true, false);\nfile.setReadable(true, false);\nfile.setWritable(true, false);",
        "vuln": "중요한 자원에 대한 잘못된 권한 설정",
        "TFpositive": "정탐",
        "guide": "325"
    },
    "208": {
        "question": "static void HashWithoutSalt()\n{\nvar bytes = new byte[100];\n(new Random()).NextBytes(bytes);\nvar source = bytes;\nvar sha256 = new SHA256CryptoServiceProvider();\nsha256.ComputeHash(source);\n}",
        "vuln": "솔트 없이 일방향 해쉬 함수 사용",
        "TFpositive": "정탐",
        "guide": "391"
    },
    "209": {
        "question": "…public Connection DBConnect(String url, String usr) {\nString password = “68af404b513073584c4b6f22b6c63e6b”;\ntry {\ncon = DriverManager.getConnection(url, usr, password);\n} catch (SQLException e) {\nSystem.err.println(“…”);\n}\nreturn con;\n}\n…",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "358"
    },
    "210": {
        "question": "extern char *salt;\ntypedef int SQLSMALLINT;\nint dbaccess(char *user, char *passwd){\nchar *server = \"DBserver\";\nchar *cpasswd;\nchar* storedpasswd = getenv(“password”);\nchar* salt = getenv(“salt”);\nSQLHENV henv;\nSQLHDBC hdbc;\nSQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);\nSQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);\ncpasswd = crypt(passwd, salt);\nif (strcmp(cpasswd, storedpasswd) != 0){\nprintf(\"Incorrect password\\n\");\nSQLFreeHandle(SQL_HANDLE_DBC, &hdbc);\nSQLFreeHandle(SQL_HANDLE_ENV, &henv);\nreturn -1;\n}\n}",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "오탐",
        "guide": "356"
    },
    "211": {
        "question": "void foo(){\n/* ... */\nhFile = CreateFile((LPCWSTR)data,GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,\nFILE_ATTRIBUTE_NORMAL, NULL);\nInternetQueryDataAvailable(m_hURL, &dwSize,0,0);\nbool result = InternetReadFile(m_hURL, lpBuffer, dwSize, &dwRead);\nif( result == true){\nWriteFile(hFile, lpBuffer, dwRead, &dwWritten, NULL);\n}\n/* ... */\n}",
        "vuln": "무결성 검사 없는 코드 다운로드",
        "TFpositive": "오탐",
        "guide": "398"
    },
    "212": {
        "question": "public static final String ALGORITHM = \"RSA\";\npublic static final String PRIVATE_KEY_FILE = \"C:/keys/private.key\";\npublic static final String PUBLIC_KEY_FILE = \"C:/keys/public.key\";\npublic static void generateKey() {\ntry {\nfinal KeyPairGenerator keyGen = KeyPairGenerator.getInstance(ALGORITHM);\nkeyGen.initialize(2048);\nfinal KeyPair key = keyGen.generateKeyPair();\nFile privateKeyFile = new File(PRIVATE_KEY_FILE);\nFile publicKeyFile = new File(PUBLIC_KEY_FILE);",
        "vuln": "충분하지 않은 키 길이 사용",
        "TFpositive": "오탐",
        "guide": "361"
    },
    "213": {
        "question": "public String getPasswordHash(String password, byte[] salt) throws +Exception {\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nmd.update(password.getBytes());\nmd.update(salt);\nbyte byteData[] = md.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i=0; i<byteData.length i++) {\nString hex=Integer.toHexString(0xff & byteData[i]);\nif (hex.length() == 1) {\nhexString.append('0');\n}\nhexString.append(hex);\n}\nreturn hexString.toString();\n}",
        "vuln": "솔트 없이 일방향 해쉬 함수 사용",
        "TFpositive": "오탐",
        "guide": "391"
    },
    "214": {
        "question": "try {\nSocket s = new Socket(\"taranis\", 4444);\nPrintWriter o = new PrintWriter(s.getOutputStream(), true);\nString password = getPassword();\no.write(password);\n} catch (FileNotFoundException e) {\n……",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "340"
    },
    "215": {
        "question": "typedef int SQLSMALLINT;\nint dbaccess(char *user, char *passwd){\nchar *server = \"DBserver\";\nchar *cpasswd;\nSQLHENV henv;\nSQLHDBC hdbc;\nSQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);\nSQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);\ncpasswd = crypt(passwd, “salt”);\nif (strcmp(cpasswd, \"68af404b513073582b6c63e6b\") != 0) {\nprintf(\"Incorrect password\\n\");\nreturn -1;\n}\n}",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "355"
    },
    "216": {
        "question": "URL[] classURLs = new URL[]{\nnew URL(“file:subdir/”)\n};\nURLClassLoader loader = new URLClassLoader(classURLs);\nClass loadedClass = Class.forName(“LoadMe”, true, loader);",
        "vuln": "무결성 검사 없는 코드 다운로드",
        "TFpositive": "정탐",
        "guide": "399"
    },
    "217": {
        "question": "static string UseRSA(string input) {\nvar rsa = new RSACryptoServiceProvider(1024);\n...\n}",
        "vuln": "충분하지 않은 키 길이 사용",
        "TFpositive": "정탐",
        "guide": "361"
    },
    "218": {
        "question": "public static void AddDirectorySecurity(string FileName)\n{\nDirectoryInfo dInfo = new DirectoryInfo(FileName);\nDirectorySecurity dSecurity = dInfo.GetAccessControl();\ndSecurity.AddAccessRule(new FileSystemAccessRule(\"everyone\",\nFileSystemRights.FullControl, InheritanceFlags.ObjectInherit\n| InheritanceFlags.ContainerInherit, PropagationFlags.NoPropagateInherit,\nAccessControlType.Allow));\ndInfo.SetAccessControl(dSecurity);",
        "vuln": "중요한 자원에 대한 잘못된 권한 설정",
        "TFpositive": "정탐",
        "guide": "326"
    },
    "219": {
        "question": "protected void LoginButton_Click(object sender, EventArgs e) {\nFormsAuthentication.RedirectFromLoginPage(UserName.Text,\nRememberMe.Checked);\n}",
        "vuln": "적절한 인증 없는 중요기능 허용",
        "TFpositive": "정탐",
        "guide": "316"
    },
    "220": {
        "question": "try {\nSocket s = new Socket(\"taranis\", 4444);\nPrintStream o = new PrintStream(s.getOutputStream(), true);\nCipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nString password = getPassword();\nbyte[] encPassword = c.update(password.getBytes());\no.write(encPassword, 0, encPassword.length);\n} catch (FileNotFoundException e) {\n……",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "오탐",
        "guide": "341"
    },
    "221": {
        "question": "private static final String SERVER_IP = \"127.0.0.1\";\nprivate static final int SERVER_PORT = 8080;\nprivate static final int FAIL = -1;\npublic void login() {\nString username = null;\nString password = null;\nSocket socket = null;\nin t result = FAIL;\ntry {\nsocket = new Socket(SERVER_IP, SERVER_PORT);\nwhile (result == FAIL) {\n...\nresult = verifyUser(username, password);\n}\n}",
        "vuln": "반복된 인증시도 제한 기능 부재",
        "TFpositive": "정탐",
        "guide": "400"
    },
    "222": {
        "question": "public String getPasswordHash(String password) throws Exception {\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nmd.update(password.getBytes());\nbyte byteData[] = md.digest();\nStringBuffer hexString = new StringBuffer();\nfor (int i=0; i<byteData.length i++) {\nString hex=Integer.toHexString(0xff & byteData[i]);\nif (hex.length() == 1) {\nhexString.append('0');\n}\nhexString.append(hex);\n}\nreturn hexString.toString();\n}",
        "vuln": "솔트 없이 일방향 해쉬 함수 사용",
        "TFpositive": "정탐",
        "guide": "390"
    },
    "223": {
        "question": "static string UseRSA(string input) {\nvar rsa = new RSACryptoServiceProvider(2048);\n...\n}",
        "vuln": "충분하지 않은 키 길이 사용",
        "TFpositive": "오탐",
        "guide": "361"
    },
    "224": {
        "question": "File file = new File(\"/home/setup/system.ini\");\nfile.setExecutable(false);\nfile.setReadable(true);\nfile.setWritable(false);",
        "vuln": "중요한 자원에 대한 잘못된 권한 설정",
        "TFpositive": "오탐",
        "guide": "326"
    },
    "225": {
        "question": "byte[] key = GetKey(./password.ini);\nbyte[] iv = GetIV(./password.ini);\nFileStream fStream = File.Open(fileName, FileMode.OpenOrCreate);\nCryptoStream cStream = new CryptoStream(fStream, new\nTripleDESCryptoServiceProvider().CreateEncryptor(Decrypt(key),\nDecrypt(iv)),\nCryptoStreamMode.Write);",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "오탐",
        "guide": "355"
    },
    "226": {
        "question": "String Sid = getSessionValue(session, “ihidnum”);\nSid = AEScryptWithSaltKey.encode(StrTool.sNN(Sid));\nString sIhidnum = Sid;",
        "vuln": "주석문 안에 포함된 시스템 주요정보",
        "TFpositive": "오탐",
        "guide": "389"
    },
    "227": {
        "question": "private static final String SERVER_IP = \"127.0.0.1\";\nprivate static final int SERVER_PORT = 8080;\nprivate static final int FAIL = -1;\nprivate static final int MAX_ATTEMPTS = 5;\npublic void login() {\nString username = null;\nString password = null;\nSocket socket = null;\nint result = FAIL;\nint count = 0;\ntry {\nsocket = new Socket(SERVER_IP, SERVER_PORT);\nwhile (result == FAIL && count < MAX_ATTEMPTS) {\n...\nresult = verifyUser(username, password);\ncount++;\n}\n}",
        "vuln": "반복된 인증시도 제한 기능 부재",
        "TFpositive": "오탐",
        "guide": "401"
    },
    "228": {
        "question": "EVP_PKEY *RSAKey(){\nEVP_PKEY *pkey;\nRSA *rsa;\nrsa = RSA_generate_key(512, 35, NULL, NULL);\nif(rsa == NULL){\nprintf(\"Error\\n\");\nreturn NULL;\n}\npkey = EVP_PKEY_new();\nEVP_PKEY_assign_RSA(pkey, rsa);\nreturn pkey;",
        "vuln": "충분하지 않은 키 길이 사용",
        "TFpositive": "정탐",
        "guide": "362"
    },
    "229": {
        "question": "public void EmailPassword_OnClick(object sender, EventArgs args)\n{\nMembershipUser u = Membership.GetUser(UsernameTextBox.Text, false);\nString password;\nif (u != null)\n{\ntry\n{\npassword = u.GetPassword(); // sensitive data created\n}\ncatch (Exception e)\n{\nMsg.Text = \"An exception occurred retrieving your password: \" +\nServer.HtmlEncode(e.Message);\nreturn;\n}\nMailMessage Message = new MailMessage();\nMessage.Body = \"Your password is: \" + Server.HtmlEncode(password);\nSmtpMail.Send(Message);\nMsg.Text = \"Password sent via e-mail.\";\n}\nelse\n{\nMsg.Text = \"User name is not valid. Please check the value and try again.\";\n}\n}",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "341"
    },
    "230": {
        "question": "byte[] key = new byte[] { 0x43, 0x87, 0x23, 0x72 };\nbyte[] iv = new byte[] { 0x43, 0x87, 0x23, 0x72 };\nFileStream fStream = File.Open(fileName, FileMode.OpenOrCreate);\nCryptoStream cStream = new CryptoStream(fStream,\nnew TripleDESCryptoServiceProvider().CreateEncryptor(key, iv),\nCryptoStreamMode.Write);",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "354"
    },
    "231": {
        "question": "//로그인 실패 시 아무런 제약이 없음\noverride protected void OnLoginError(EventArgs e)\n{\n//do nothing\n}",
        "vuln": "반복된 인증시도 제한 기능 부재",
        "TFpositive": "정탐",
        "guide": "402"
    },
    "232": {
        "question": "public static void AddDirectorySecurity(string FileName, string Account,\nFileSystemRights Rights, AccessControlType ControlType)\n{\nDirectoryInfo dInfo = new DirectoryInfo(FileName);\nDirectorySecurity dSecurity = dInfo.GetAccessControl();\ndSecurity.AddAccessRule(new FileSystemAccessRule(Account, Rights,\nControlType));\ndInfo.SetAccessControl(dSecurity);\n}",
        "vuln": "중요한 자원에 대한 잘못된 권한 설정",
        "TFpositive": "오탐",
        "guide": "327"
    },
    "233": {
        "question": "public void daoTest() throws Exception {\n    // db sample : 84d5d0a08a3ec5e2d91a\n    // 암호화 전, 후 : 1365ADMIN_01, aa84c40031d808196537ad3dcf81f9af\nString pwd= “46c165a343fd6841273ae04655af24dd”;\nString pwd1= ARIAEngine.decARIA(pwd);\nSystem.out.println(pwd1);\n}",
        "vuln": "주석문 안에 포함된 시스템 주요정보",
        "TFpositive": "정탐",
        "guide": "389"
    },
    "234": {
        "question": "import javax.crypto.KeyGenerator;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.Cipher;\n……\npublic String encriptString(String usr) {\nString key = getPassword(\"./password.ini\");\nkey = decrypt(key);\nif (key != null) {\nbyte[] bToEncrypt = usr.getBytes(\"UTF-8\");\nSecretKeySpec sKeySpec = new SecretKeySpec(key.getBytes(), \"AES\");",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "오탐",
        "guide": "354"
    },
    "235": {
        "question": "EVP_PKEY *RSAKey(){\nEVP_PKEY *pkey;\nRSA *rsa;\nrsa = RSA_generate_key(2048, 35, NULL, NULL);\nif(rsa == NULL){\nprintf(\"Error\\n\");\nreturn NULL;\n}\npkey = EVP_PKEY_new();\nEVP_PKEY_assign_RSA(pkey, rsa);\nreturn pkey;\n}",
        "vuln": "충분하지 않은 키 길이 사용",
        "TFpositive": "오탐",
        "guide": "362"
    },
    "236": {
        "question": "public void EmailPassword_OnClick(object sender, EventArgs args)\n{\nMembershipUser u = Membership.GetUser(UsernameTextBox.Text, false);\nString password;\nif (u != null)\n{\ntry\n{\npassword = u.GetPassword();\nbyte[] data = System.Text.Encoding.ASCII.GetBytes(password);\ndata = new\nSystem.Security.Cryptography.SHA256Managed().ComputeHash(data); String\nhashedPassword = System.Text.Encoding.ASCII.GetString(data);\n}\ncatch (Exception e)\n{\nMsg.Text = \"An exception occurred retrieving your password: \" +\nServer.HtmlEncode(e.Message);\nreturn;\n}\nMailMessage Message = new MailMessage();\nMessage.Body =\"Your password is: \"+Server.HtmlEncode(hasedPassword);\nSmtpMail.Send(Message);\nMsg.Text = \"Password sent via e-mail.\";\n}\nelse\n{\nMsg.Text = \"User name is not valid. Please check the value and try again.\";\n}\n}",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "342"
    },
    "237": {
        "question": "…/*\n* Password for administrator is “tiger.”\n*/\npublic Connection DBConnect(String id, String password) {\nString url = “DBServer”;\nConnection conn = null;\ntry {\nString CONNECT_STRING = url + “:” + id + “:” + password;\nInitialContext ctx = new InitialContext();\nDataSource datasource = (DataSource) ctx.lookup(CONNECT_STRING);\nconn = datasource.getConnection();\n} catch (SQLException e) {\nSystem.err.printf(“….”);\n}\n…\n}",
        "vuln": "주석문 안에 포함된 시스템 주요정보",
        "TFpositive": "정탐",
        "guide": "388"
    },
    "238": {
        "question": "import javax.crypto.KeyGenerator;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.Cipher;\n……\npublic String encriptString(String usr) {\nString key = \"22df3023sf~2;asn!@#/>as\";\nif (key != null) {\nbyte[] bToEncrypt = usr.getBytes(\"UTF-8\");\nSecretKeySpec sKeySpec = new SecretKeySpec(key.getBytes(), \"AES\");",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "353"
    },
    "239": {
        "question": "override protected void OnLoginError(EventArgs e)\n{\nif(ViewState[\"LoginErrors\"] == null)\nViewState[\"LoginErrors\"] = 0;\nint ErrorCount = (int)ViewState[\"LoginErrors\"] + 1;\nViewState[\"LoginErrors\"] = ErrorCount;\nif((ErrorCount > 3) && Login1.PasswordRecoveryUrl !=\nstring.Empty)\nResponse.Redirect(Login1.PasswordRecoveryUrl);\n}",
        "vuln": "반복된 인증시도 제한 기능 부재",
        "TFpositive": "오탐",
        "guide": "402"
    },
    "240": {
        "question": "…\npublic void target() throws NoSuchAlgorithmException {\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(“RSA”);\nkeyGen.initialize(512);\nKeyPair myKeys = keyGen.generateKeyPair();\n}",
        "vuln": "충분하지 않은 키 길이 사용",
        "TFpositive": "정탐",
        "guide": "363"
    },
    "241": {
        "question": "int dbaccess(){\nFILE *fp; char *server = \"DBserver\";\nchar passwd[20];\nchar user[20];\nSQLHENV henv;\nSQLHDBC hdbc;\nfp = fopen(\"config\", \"r\");\nfgets(user, sizeof(user), fp);\nfgets(passwd, sizeof(passwd), fp);\nfclose(fp);\nSQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);\nSQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);\nSQLConnect(hdbc,\n(SQLCHAR*) server,\n(SQLSMALLINT) strlen(server),\n(SQLCHAR*) user,\n(SQLSMALLINT) strlen(user),\n(SQLCHAR*) passwd,\n(SQLSMALLINT) strlen(passwd) );\nreturn 0;",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "343"
    },
    "242": {
        "question": "protected void LoginButton_Click(object sender, EventArgs e) {\nif(Membership.ValidateUser(UserName.Text, Password.Text)) {\nFormsAuthentication.RedirectFromLoginPage(UserName.Text, RememberMe.Checked);\n}\n}",
        "vuln": "적절한 인증 없는 중요기능 허용",
        "TFpositive": "정탐",
        "guide": "316"
    },
    "243": {
        "question": "int validateUser(char *host, int port) {\nint socket = openSocketConnection(host, port);\nif (socket < 0) {\nprintf(\"Unable to open socket connection\");\nreturn(FAIL);\n}\nint isValidUser = 0;\nchar nm[NAME_SIZE];\nchar pw[PSWD_SIZE];\nwhile (isValidUser==0) {\nif (getNextMsg(socket, nm, NAME_SIZE) > 0) {\nif (getNextMsg(socket, pw, PSWD_SIZE) > 0) {\nisValidUser = AuthenticateUser(nm, pw);\n}\n}\n}\nreturn(SUCCESS);\n}",
        "vuln": "반복된 인증시도 제한 기능 부재",
        "TFpositive": "정탐",
        "guide": "402"
    },
    "244": {
        "question": "int dbaccess(char *server, char *user, char *passwd){\nSQLHENV henv;\nSQLHDBC hdbc;\nchar *password = getenv(“password”);\nSQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);\nSQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);\nSQLConnect(hdbc, (SQLCHAR*) server, strlen(server), user, strlen(user),\npassword, strlen(password));\nSQLFreeHandle(SQL_HANDLE_DBC, hdbc);\nSQLFreeHandle(SQL_HANDLE_ENV, henv);\nreturn 0;\n}",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "오탐",
        "guide": "353"
    },
    "245": {
        "question": "int verfiyAuth(char *ipasswd, char *orgpasswd){\nchar *admin = \"admin\";\nif(strncmp(ipasswd, oprgpasswd, sizeof(ipasswd)) != 0){\nprintf(\"Authentication Fail!\\n\");\n}\nreturn admin;\n}",
        "vuln": "주석문 안에 포함된 시스템 주요정보",
        "TFpositive": "오탐",
        "guide": "388"
    },
    "246": {
        "question": "#define MAX_ATTEMPTS 5\nint validateUser(char *host, int port) {\n......\nint count = 0;\nwhile ((isValidUser==0) && (count<MAX_ATTEMPTS)) {\nif (getNextMsg(socket, nm, NAME_SIZE) > 0) {\nif (getNextMsg(socket, pw, PSWD_SIZE) > 0) {\nisValidUser = AuthenticateUser(nm, pw);\n}\n}\ncount++;\n}\nif (isValidUser) {\nreturn(SUCCESS);\n} else {\nreturn(FAIL);\n}\n}",
        "vuln": "반복된 인증시도 제한 기능 부재",
        "TFpositive": "오탐",
        "guide": "403"
    },
    "247": {
        "question": "import java.util.Random;\n...\npublic Static int getRandomValue(int maxValue) {\nRandom random = new Random(100);\nreturn random.nextInt(maxValue);\n}\npublic Static String getAuthKey() {\nRandom random = new Random();\nString authKey = Integer.toString(random.nextInt());",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "정탐",
        "guide": "364"
    },
    "248": {
        "question": "int dbaccess(){\nFILE *fp; char *server = \"DBserver\";\nchar passwd[20];\nchar user[20];\nchar *encPasswd;\nchar *key;\nSQLHENV henv;\nSQLHDBC hdbc;\nHCkCrypt2 crypt = CkCrypt2_putCryptAlgorithm(crypt,”aes”);\nCkCrypt2_putCipherMode(crypt,”cbc”);\nkey = getenv(“encrypt_key”);\nCkCrypt2_SetEncodedKey(crypt,key,”hex”);\nfp = fopen(\"config\", \"r\");\nfgets(user, sizeof(user), fp);\nfgets(passwd, sizeof(passwd), fp);\nfclose(fp);\nncPasswd = CkCrypt2_encryptStringENC(crypt, passwd);\nSQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);\nSQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);\nSQLConnect(hdbc,\n(SQLCHAR*) server,\n(SQLSMALLINT) strlen(server),\n(SQLCHAR*) user,\n(SQLSMALLINT) strlen(user),\n(SQLCHAR*) encPasswd,\n(SQLSMALLINT) strlen(verifiedPwd) );\nreturn 0;\n}",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "오탐",
        "guide": "344"
    },
    "249": {
        "question": "int dbaccess(char *server, char *user){\nSQLHENV henv;\nSQLHDBC hdbc;\nchar *password = “password”;\nSQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &henv);\nSQLAllocHandle(SQL_HANDLE_DBC, henv, &hdbc);\nSQLConnect(hdbc,(SQLCHAR*)server,strlen(server),user,strlen(user),\npassword, strlen(password));\nreturn 0;",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "352"
    },
    "250": {
        "question": "/* password is \"admin\" */\n/* passwd is \"admin\" */\nint verfiyAuth(char *ipasswd, char *orgpasswd){\nchar *admin = \"admin\";\nif(strncmp(ipasswd, oprgpasswd, sizeof(ipasswd)) != 0){\nprintf(\"Authentication Fail!\\n\");\n}\nreturn admin;",
        "vuln": "주석문 안에 포함된 시스템 주요정보",
        "TFpositive": "정탐",
        "guide": "387"
    },
    "251": {
        "question": "<script type=’text/javascript’>\nif (${command.allowedIp} == false) {\ndocument.write(“”Check Administrator IP …””);\nalert(“권한이 없습니다.”);\nhistory.back(-1);\n}",
        "vuln": "적절한 인증 없는 중요기능 허용",
        "TFpositive": "정탐",
        "guide": "318"
    },
    "252": {
        "question": "int validateUser(char *host, int port)\n{\nint socket = openSocketConnection(host, port);\nif (socket < 0)\n{\nprintf(“Unable to open socket connection”);\nreturn(FAIL);\n}\nint isValidUser = 0;\nchar username[USERNAME_SIZE];\nchar password[PASSWORD_SIZE];\nwhile (isValidUser == 0)\n{\nif (getNextMessage(socket, username, USERNAME_SIZE) > 0)\n{\nif (getNextMessage(socket, password, PASSWORD_SIZE) > 0)\n{\nisValidUser = AuthenticateUser(username, password);\n}\n}\n}\nreturn(SUCCESS);\n}",
        "vuln": "반복된 인증시도 제한 기능 부재",
        "TFpositive": "정탐",
        "guide": "404"
    },
    "253": {
        "question": "import java.util.Random;\nimport java.security.SecureRandom;\n...\npublic Static int getRandomValue(int maxValue) {\nRandom random = new Random();\nreturn random.nextInt(maxValue);\n}\npublic Static String getAuthKey() {\ntry{\nSecureRandom secureRandom = SecureRandom.getInstance(\"SHA1PRNG\");\nMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\nsecureRandom.setSeed(secureRandom.generateSeed(128));\nString authKey = new String(digest.digest((secureRandom.nextLong() +\n\"\").getBytes()));\n...\n} catch (NoSuchAlgorithmException e) {",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "오탐",
        "guide": "365"
    },
    "254": {
        "question": "if (connect(sock, (struct sockaddr *)&server, sizeof server) < 0)\nerror(“Connecting”);\n…\nwhile ((n=read(sock,buffer,BUFSIZE-1))!=-1) {\n… // buffer password_buffer 값을 에 추가\nwrite(passFileD,password_buffer,n);\n…",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "346"
    },
    "255": {
        "question": "//DB연결 root / a1q2w3r3f2!@\nconn = customGetConnection(USER, PASS);",
        "vuln": "주석문 안에 포함된 시스템 주요정보",
        "TFpositive": "정탐",
        "guide": "387"
    },
    "256": {
        "question": "umask(0);\nFILE *out = fopen(\"file_name\", \"w\");\nif(out){\nfprintf(out, \"secure code\\n\");\nfclose(out);",
        "vuln": "중요한 자원에 대한 잘못된 권한 설정",
        "TFpositive": "정탐",
        "guide": "328"
    },
    "257": {
        "question": "string UserName = \"username\";\nstring Password = \"password\";\nSecureString SecurelyStoredPassword = new SecureString();\nforeach (char c in Password)\n{\nSecurelyStoredPassword.AppendChar(c);\n}\nNetworkCredential secure_myCred = new NetworkCredential(UserName,\nSecurelyStoredPassword);",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "오탐",
        "guide": "352"
    },
    "258": {
        "question": "…\n<connectionStrings>\n<add name=”ud_DEV” connectionString=”connectDB=uDB; uid=db2admin; pwd=-\npassword; dbalias=uDB;” providerName=”System.Data.Odbc” />\n</connectionStrings>\n…",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "347"
    },
    "259": {
        "question": "…\n@Controller\n@RequestMapping(“bbs”)\npublic class BbsController {\n@Autowired\nprivate BoardDao boardDao;\n@RequestMapping(“delete”)\npublic String delete(@Requestparam(“contentid”) int contentId, HttpServletRequest\nreques, Map model) {\nif(request.getSession().getAttribute(“isLogin”) == “logined”) {\nboardDao.delete(contenId);\n}\n…",
        "vuln": "적절한 인증 없는 중요기능 허용",
        "TFpositive": "정탐",
        "guide": "317"
    },
    "260": {
        "question": "umask(077);\nFILE *out = fopen(\"file_name\", \"w\");\nif(out){\nfprintf(out, \"secure code\\n\");\nfclose(out);",
        "vuln": "중요한 자원에 대한 잘못된 권한 설정",
        "TFpositive": "오탐",
        "guide": "328"
    },
    "261": {
        "question": "void foo()\n{\ntry {\nSocket socket = new Socket(“taranis”, 4444);\nPrintWriter out = new PrintWriter(socket.getOutputStream(), true);\nString password = getPassword();\nout.write(password);\n} catch (FileNotFoundException e) {\n…",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "347"
    },
    "262": {
        "question": "conn = customGetConnection(USER, PASS);",
        "vuln": "주석문 안에 포함된 시스템 주요정보",
        "TFpositive": "오탐",
        "guide": "387"
    },
    "263": {
        "question": "static int GenerateDigit()\n{\nRandom rng = new Random();\nreturn rng.Next(10);\n}",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "정탐",
        "guide": "366"
    },
    "264": {
        "question": "string UserName = \"username\";\nstring Password = \"password\";\nNetworkCredential myCred = new NetworkCredential(UserName, Password);",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "351"
    },
    "265": {
        "question": "// DB연결 root / a1q2w3r3f2!@\ncon = DriverManager.getConnection(URL, USER, PASS);",
        "vuln": "주석문 안에 포함된 시스템 주요정보",
        "TFpositive": "정탐",
        "guide": "386"
    },
    "266": {
        "question": "private BoardDao boardDao;\nString action = request.getParameter(\"action\");\nString contentId = request.getParameter(\"contentId\");\nif (action != null && action.equals(\"delete\")) {\nboardDao.delete(contentId);\n}",
        "vuln": "부적절한 인가",
        "TFpositive": "정탐",
        "guide": "319"
    },
    "267": {
        "question": "public class MemberDAO {\nprivate static final String DRIVER = \"oracle.jdbc.driver.OracleDriver\";\nprivate static final String URL = \"jdbc:oracle:thin:@192.168.0.3:1521:ORCL\";\nprivate static final String USER = \"SCOTT\"; // DB ID;\nprivate static final String PASS = \"SCOTT\"; // DB PW;\n……\npublic Connection getConn() {\nConnection con = null;\ntry {\nClass.forName(DRIVER);\ncon = DriverManager.getConnection(URL, USER, PASS);\n……",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "정탐",
        "guide": "350"
    },
    "268": {
        "question": "try {\nURL u = new URL(“http://www.secret.example.org/”);\nHttpURLConnection hu = (HttpURLConnection) u.openConnection();\nhu.setRequestMethod(“PUT”);\nhu.connect();\nOutputStream os = hu.getOutputStream();\nhu.disconnect();\n} catch (IOException e) {\n//…\n}",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "정탐",
        "guide": "348"
    },
    "269": {
        "question": "con = DriverManager.getConnection(URL, USER, PASS);",
        "vuln": "암호화되지 않은 중요정보",
        "TFpositive": "오탐",
        "guide": "386"
    },
    "270": {
        "question": "static int GenerateDigitGood()\n{\nbyte[] b = new byte[4];\nnew System.Security.Cryptography.RNGCryptoServiceProvider().GetBytes(b);\nreturn (b[0] & 0x7f) << 24 | b[1] << 16 | b[2] << 8 | b[3];\n}",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "오탐",
        "guide": "366"
    },
    "271": {
        "question": "public class MemberDAO {\nprivate static final String DRIVER = \"oracle.jdbc.driver.OracleDriver\";\nprivate static final String URL = \"jdbc:oracle:thin:@192.168.0.3:1521:ORCL\";\nprivate static final String USER = \"SCOTT\"; // DB ID\n……\npublic Connection getConn() {\nConnection con = null;\ntry {\nClass.forName(DRIVER);\nString PASS = props.getProperty(\"EncryptedPswd\");\nbyte[] decryptedPswd = cipher.doFinal(PASS.getBytes());\nPASS = new String(decryptedPswd);\ncon = DriverManager.getConnection(URL, USER, PASS);\n……",
        "vuln": "하드코드된 중요정보",
        "TFpositive": "오탐",
        "guide": "351"
    },
    "272": {
        "question": "protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n……\nString username = request.getParameter(“username”);\nchar[] password = request.getParameter(“password”).toCharArray();\nboolean rememberMe = Boolean.valueOf(request.getParameter(“rememberme”));\nLoginService loginService = new LoginServiceImpl();\nif (rememberMe) {\nCookie loginCookie = new Cookie(“rememberme”, “YES”);\nloginCookie.setMaxAge(60*60*24);\nresponse.addCookie(loginCookie);\n……\n} else {\n……\n}\nArrays.fill(password, ‘ ‘);\n}",
        "vuln": "사용자 하드디스크에 저장되는 쿠키를 통한 정보 노출",
        "TFpositive": "오탐",
        "guide": "385"
    },
    "273": {
        "question": "private BoardDao boardDao;\nString action = request.getParameter(\"action\");\nString contentId = request.getParameter(\"contentId\");\nUser user= (User)session.getAttribute(\"user\");\nif (action != null && action.equals(\"delete\") &&\ncheckAccessControlList(user,action)) {\nboardDao.delete(contenId);\n}\n}",
        "vuln": "부적절한 인가",
        "TFpositive": "오탐",
        "guide": "320"
    },
    "274": {
        "question": "String cmd = “umask 0”;\nFile file = new File(“/home/report/report.txt”);\n…\nRuntime.getRuntime().exec(cmd);",
        "vuln": "중요한 자원에 대한 잘못된 권한 설정",
        "TFpositive": "정탐",
        "guide": "329"
    },
    "275": {
        "question": "protected void doPost(HttpServletRequest request, HttpServletResponse response) {\n……\nString username = request.getParameter(“username”);\nchar[] password = request.getParameter(“password”).toCharArray();\nboolean rememberMe = Boolean.valueOf(request.getParameter(“rememberme”));\nLoginService loginService = new LoginServiceImpl();\nif (rememberMe) {\nCookie loginCookie = new Cookie(“rememberme”, “YES”);\nloginCookie.setMaxAge(60*60*24*30*12);\nresponse.addCookie(loginCookie);\n……\n} else {\n……",
        "vuln": "사용자 하드디스크에 저장되는 쿠키를 통한 정보 노출",
        "TFpositive": "정탐",
        "guide": "384"
    },
    "276": {
        "question": "public void sendBankAccount(String accountNumber,double balance) {\n…\nBankAccount account = new BankAccount();\naccount.setAccountNumber(accountNumber);\naccount.setToPerson(toPerson);\naccount.setBalance(balance);\nAccountManager.send(account);\n…\n}",
        "vuln": "적절한 인증 없는 중요기능 허용",
        "TFpositive": "정탐",
        "guide": "317"
    },
    "277": {
        "question": "#define FIND_DN \"uid=han,ou=staff,dc=example,dc=com\"\nint searchData2LDAP(LDAP *ld, char *username, char *password) {\nunsigned long rc;\nchar filter[20];\nLDAPMessage *result\nif ( ldap_simple_bind_s(ld, username, password) != LDAP_SUCCESS ) {\nprintf(\"authorization error\");\nreturn(FAIL);\n}\nif ( strcmp(username,getLoginName()) != 0 ) {\nprintf(\"Login error\");\nreturn(FAIL);\n}\nsnprintf(filter, sizeof(filter), \"(name=%s)\", username);\nrc = ldap_search_ext_s(ld, FIND_DN, LDAP_SCOPE_BASE, filter, NULL, 0, NULL,\nNULL, LDAP_NO_LIMIT, LDAP_NO_LIMIT, &result);\nreturn rc;\n}",
        "vuln": "부적절한 인가",
        "TFpositive": "오탐",
        "guide": "321"
    },
    "278": {
        "question": "void foo(){\nint i;\nfor(i=0; i<20; i++)\nprintf(\"%d\", rand());",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "정탐",
        "guide": "366"
    },
    "279": {
        "question": "public class AdministrationController : Controller\n{\n…\n}",
        "vuln": "부적절한 인가",
        "TFpositive": "정탐",
        "guide": "320"
    },
    "280": {
        "question": "…\nCookie ck = new Cookie(“id”, “test123”) ;\nck.setMaxAge(60*60*24*365*10) ;\nresponse.addCookie(ck) ;\n…",
        "vuln": "사용자 하드디스크에 저장되는 쿠키를 통한 정보 노출",
        "TFpositive": "정탐",
        "guide": "384"
    },
    "281": {
        "question": "[Authorize(Roles = \"Administrator\")]\npublic class AdministrationController : Controller\n{\n…\n}",
        "vuln": "부적절한 인가",
        "TFpositive": "오탐",
        "guide": "320"
    },
    "282": {
        "question": "void foo(){\nsrandom(time(NULL));\nint i;\nfor(i=0; i<20; i++)\nprintf(\"%ld\", random());\n}",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "오탐",
        "guide": "367"
    },
    "283": {
        "question": "HttpCookie cookie = Request.Cookies.Get(“ExampleCookie”);\ncookie.Expires = DateTime.Now.AddMinutes(10d);\nResponse.Cookies.Add(cookie);",
        "vuln": "사용자 하드디스크에 저장되는 쿠키를 통한 정보 노출",
        "TFpositive": "오탐",
        "guide": "383"
    },
    "284": {
        "question": "#define FIND_DN \"uid=han,ou=staff,dc=example,dc=com\"\nint searchData2LDAP(LDAP *ld, char *username) {\nunsigned long rc;\nchar filter[20];\nLDAPMessage *result;\nsnprintf(filter, sizeof(filter),\"(name=%s)\", username);\nrc = ldap_search_ext_s(ld, FIND_DN, LDAP_SCOPE_BASE, filter, NULL, 0,\nNULL,NULL, LDAP_NO_LIMIT, LDAP_NO_LIMIT, &result);\nreturn rc;\n}",
        "vuln": "부적절한 인가",
        "TFpositive": "정탐",
        "guide": "321"
    },
    "285": {
        "question": "HttpCookie cookie = Request.Cookies.Get(“ExampleCookie”);\ncookie.Expires = DateTime.Now.AddMinutes(60.0*24.0*365.0);\nResponse.Cookies.Add(cookie);",
        "vuln": "사용자 하드디스크에 저장되는 쿠키를 통한 정보 노출",
        "TFpositive": "정탐",
        "guide": "383"
    },
    "286": {
        "question": "…\npublic void setSessionID() {\nif (!Get_Cookie(‘SessionID’))\nSet_Cookie(‘SessionID’,Math.random());\n}",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "정탐",
        "guide": "367"
    },
    "287": {
        "question": "try {\n......\nFile file = new File(“/home/setup/system.ini”);\nfile.setExecutable(false);\nfile.setReadable(true);\nfile.setWritable(false);\nif (file.createNewFile()) {\nSystem.out.println(“File is created!”);\n} else {\nSystem.out.println(“File already exists.”);\n}\n} catch (IOException e) {\n......\n}",
        "vuln": "중요한 자원에 대한 잘못된 권한 설정",
        "TFpositive": "오탐",
        "guide": "329"
    },
    "288": {
        "question": "Cookie loginCookie = new Cookie(\"rememberme\", \"YES\");\nloginCookie.setMaxAge(60*60*24);\nresponse.addCookie(loginCookie);",
        "vuln": "사용자 하드디스크에 저장되는 쿠키를 통한 정보 노출",
        "TFpositive": "오탐",
        "guide": "382"
    },
    "289": {
        "question": ": public void f(String sSingleId, int iFlag, String sServiceProvider, String sUid,\nString\nsPwd) {\n…\nenv.put(Context.INITIAL_CONTEXT_FACTORY, CommonMySingleConst.INITCTX);\nenv.put(Context.PROVIDER_URL, sServiceProvider);\nenv.put(Context.SECURITY_AUTHENTICATION, “none”);\nenv.put(Context.SECURITY_PRINCIPAL, sUid);\nenv.put(Context.SECURITY_CREDENTIALS, sPwd);\n…",
        "vuln": "부적절한 인가",
        "TFpositive": "정탐",
        "guide": "322"
    },
    "290": {
        "question": "public static int[] insertRandom(int[] Cnt, int i ,int scope) {\nint ran = (int) (Math.random() * scope) - 1;\nif (checkDigit(ran,Cnt)) {\nCnt[i] = ran;\n} else {\ninsertRandom(Cnt,i,scope);\n}\nreturn Cnt;\n}",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "정탐",
        "guide": "368"
    },
    "291": {
        "question": "Cookie loginCookie = new Cookie(\"rememberme\", \"YES\");\nloginCookie.setMaxAge(60*60*24*365);\nresponse.addCookie(loginCookie);",
        "vuln": "사용자 하드디스크에 저장되는 쿠키를 통한 정보 노출",
        "TFpositive": "정탐",
        "guide": "382"
    },
    "292": {
        "question": "long rand = ((r.nextLong()>>>1)%(endDate.getTimeInMillis()-beginDate.getTimeInMillis()\n+ 1)) + beginDate.getTimeInMillis();",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "오탐",
        "guide": "368"
    },
    "293": {
        "question": "cert = SSL_get_peer_certificate(ssl);\nif (cert) {\n...\n}",
        "vuln": "부적절한 인증서 유효성 검증",
        "TFpositive": "정탐",
        "guide": "381"
    },
    "294": {
        "question": "import java.security.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\npublic class CryptoUtils {\npublic byte[] encrypt(byte[] msg, Key k) {\nbyte[] rslt = null;\ntry {\nCipher c = Cipher.getInstance(\"DES\");\nc.init(Cipher.ENCRYPT_MODE, k);\nrslt = c.update(msg);\n}",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "정탐",
        "guide": "331"
    },
    "295": {
        "question": "import java.security.SecureRandom;\n….\nSecureRandom r = new SecureRandom();\nlong rand = ((r.nextLong()>>>1)%(endDate.getTimeInMillis()-\nbeginDate.getTimeInMil- lis() + 1)) + beginDate.getTimeInMillis();",
        "vuln": "적절하지 않은 난수 값 사용",
        "TFpositive": "오탐",
        "guide": "368"
    },
    "296": {
        "question": "cert = SSL_get_peer_certificate(ssl);\nif (cert && (SSL_get_verify_result(ssl)==X509_V_OK)) {\nSSL_set_hostflags(ssl, X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);\nif (!SSL_set1_host(ssl, \"www.securecoding_example.com\")) {\nerror(“Invalid Common Name”);\nreturn –1;\n}\nSSL_set_verify(ssl, SSL_VERIFY_PEER, NULL);\n...\n}",
        "vuln": "부적절한 인증서 유효성 검증",
        "TFpositive": "정탐",
        "guide": "381"
    },
    "297": {
        "question": "import java.security.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\npublic class CryptoUtils {\npublic byte[] encrypt(byte[] msg, Key k) {\nbyte[] rslt = null;\ntry {\nCipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k);\nrslt = c.update(msg);\n}",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "오탐",
        "guide": "332"
    },
    "298": {
        "question": "String id = request.getParameter(\"id\");\nString pass = request.getParameter(\"pass\");\nUserVo userVO = new UserVo(id, pass);\n……\nString result = registerDAO.register(userVO);",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "정탐",
        "guide": "370"
    },
    "299": {
        "question": "private boolean verifySignature(X509Certificate toVerify, X509Certificate\nsigningCert) {\nif (!toVerify.getIssuerDN().equals(signingCert.getSubjectDN())) return false;\ntry {\ntoVerify.verify(signingCert.getPublicKey());\ntoVerify.checkValidity();\nreturn true;\n} catch (GeneralSecurityException verifyFailed) {\nreturn false;\n}\n}",
        "vuln": "부적절한 인증서 유효성 검증",
        "TFpositive": "오탐",
        "guide": "380"
    },
    "300": {
        "question": "static string Enc(string input) {\nvar des = new DESCryptoServiceProvider();\n...\n}",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "정탐",
        "guide": "332"
    },
    "301": {
        "question": "String id = request.getParameter(\"id\");\nString pass = request.getParameter(\"pass\");\nPattern pattern = Pattern.compile(\"((?=.*[a-zA-Z])(?=.*[0-9@#$%]). {9, })\");\nMatcher matcher = pattern.matcher(pass);\nif (!matcher.matches()) {\nreturn \" 비밀번호 조합규칙 오류\";\n}\nUserVo userVO = new UserVo(id, pass);\n……\nString result = registerDAO.register(userVO);",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "오탐",
        "guide": "370"
    },
    "302": {
        "question": "cert = SSL_get_peer_certificate(ssl);\nif (cert && (SSL_get_verify_result(ssl)==X509_V_OK)) {\n}",
        "vuln": "부적절한 인증서 유효성 검증",
        "TFpositive": "정탐",
        "guide": "380"
    },
    "303": {
        "question": "if ((cert = SSL_get_peer_certificate(ssl)) && host)\nfoo=SSL_get_verify_result(ssl);\nif ((X509_V_OK==foo) ||X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))",
        "vuln": "부적절한 인증서 유효성 검증",
        "TFpositive": "정탐",
        "guide": "379"
    },
    "304": {
        "question": "static string Enc(string input) {\nvar des = new AesCryptoServiceProvider();\n...\n}",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "오탐",
        "guide": "332"
    },
    "305": {
        "question": "NetworkCredential myCred = new NetworkCredential(UserName, \"\");",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "정탐",
        "guide": "371"
    },
    "306": {
        "question": "EVP_CIPHER_CTX ctx;\nEVP_CIPHER_CTX_init(&ctx);\nEVP_EncryptInit(&ctx, EVP_des_ecb(), NULL, NULL);",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "정탐",
        "guide": "333"
    },
    "307": {
        "question": "@RequestMapping(value = \"/upload\", method = RequestMethod.POST)\npublic Student upload(@RequestParam(\"file\") MultipartFile multipartFile)\nthrows IllegalStateException, IOException {\nFile f = new File(multipartFile.getOriginalFilename());\nmultipartFile.transferTo(f);\nJarFile jf = new JarFile(f, true);\nEnumeration<JarEntry> ens = jf.entries();\nwhile (ens.hasMoreElements()) {\nJarEntry en = ens.nextElement();\nif (!en.isDirectory()) {\nif (en.toString().equals(path)) {\nbyte[] data = readAll(jar.getInputStream(en), en.getSize());\nCodeSigner[] signers = en.getCodeSigners();\nif (signers != null && signers.length != 0){\n...\n}\n}\n}\n}\nreturn null;\n}",
        "vuln": "부적절한 전자서명 확인",
        "TFpositive": "오탐",
        "guide": "377"
    },
    "308": {
        "question": "NetworkCredential secure_myCred = new NetworkCredential(UserName,\nPassword);",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "정탐",
        "guide": "371"
    },
    "309": {
        "question": "EVP_CIPHER_CTX ctx;\nEVP_CIPHER_CTX_init(&ctx);\nEVP_EncryptInit(&ctx, EVP_aes_128_cbc(), key, iv);",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "오탐",
        "guide": "333"
    },
    "310": {
        "question": "bool authentication(char* id, char* pwd)\n{\nMYSQL *connectInstance;\nconnectInstance = mysql_init(NULL);\nmysql_real_connect(connectInstance, \"192.168.100.211\", id, pwd,\n\"database\", 0, NULL, 0);\n...",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "정탐",
        "guide": "371"
    },
    "311": {
        "question": "@RequestMapping(value = \"/upload\", method = RequestMethod.POST)\npublic Student upload(@RequestParam(\"file\") MultipartFile multipartFile)\nthrows IllegalStateException, IOException {\nFile f = new File(multipartFile.getOriginalFilename());\nmultipartFile.transferTo(f);\nJarFile jf = new JarFile(f, true);\n...\n}",
        "vuln": "부적절한 전자서명 확인",
        "TFpositive": "정탐",
        "guide": "377"
    },
    "312": {
        "question": "try {\nMessageDigest md = MessageDigest.getInstance(“SHA1”);\nmd.update(msg.getBytes());\nreturn md.digest();\n} catch (NoSuchAlgorithmException e) {",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "정탐",
        "guide": "334"
    },
    "313": {
        "question": "bool authentication(char* id, char* pwd)\n{\nMYSQL *connectInstance;\nconnectInstance = mysql_init(NULL);\nif(checkValidationId( id ) == true && checkValidationPwd( pwd ) ==\ntrue )\n{\nmysql_real_connect(connectInstance, \"192.168.100.211\", id, pwd,\n\"database\", 0, NULL, 0);\n}\n...\n}",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "오탐",
        "guide": "372"
    },
    "314": {
        "question": "List<FileItem> fileItemsList = uploader.parseRequest(request);\nIterator<FileItem> fileItemsIterator = fileItemsList.iterator();\nwhile (fileItemsIterator.hasNext()) {\nFileItem fileItem = fileItemsIterator.next();\nFile file = new File(request.getServletContext().getAttribute(\"FILES_DIR\") +\nFile.separator + fileItem.getName());\nfileItem.write(file);\nJarFile driver = new JarFile(file);\nuseDriver(driver);\n}",
        "vuln": "부적절한 전자서명 확인",
        "TFpositive": "정탐",
        "guide": "376"
    },
    "315": {
        "question": "<%\nString id = request.getParameter(“id”);\nString pass = request.getParameter(“pass”);\nUserVo userVO = new UserVo(id,pass);\n…….\nString result = registDAO.regist(userVO);\n……….",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "정탐",
        "guide": "373"
    },
    "316": {
        "question": "public boolean DBConnect() {\nString url = “DBServer”;\nString usr = “Scott”;\nConnection con = null;\nFileInputStream fis = null;\ntry {\nProperties prop = new Properties();\nfis = new FileInputStream(“config.properties”);\nbyte password[] = Base64.decode(prop.getProperty(“password”));\ncon = DriverManager.getConnection(url, usr, password.toString());\n} catch (FileNotFoundException e) {\n…\n} catch (SQLException e) {\n…\n}",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "정탐",
        "guide": "334"
    },
    "317": {
        "question": "…\npublic void doPost(HttpServletRequest request, HttpServletResponse response)\nthrows IOException, ServletException {\ntry {\nString id = request.getParameter(“id”);\nString passwd = request.getParameter(“passwd”);\n// 비밀번호 복잡도 검증 없이 가입 승인 처리\n….\n} catch (SQLException e) { … }\n}",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "정탐",
        "guide": "373"
    },
    "318": {
        "question": "File f = new File(downloadedFilePath);\nJarFile jf = new JarFile(f, true);\nEnumeration<JarEntry> ens = jf.entries();\nwhile (ens.hasMoreElements()) {\nJarEntry en = ens.nextElement();\nif (!en.isDirectory()) {\nif (en.toString().equals(path)) {\nbyte[] data = readAll(jar.getInputStream(en), en.getSize());\nCoeSigner[] signers = en.getCodeSigners();\n...\n}\n}\n}\njf.close();",
        "vuln": "부적절한 전자서명 확인",
        "TFpositive": "오탐",
        "guide": "376"
    },
    "319": {
        "question": "<%\nString id = request.getParameter(“id”);\nString pass = request.getParameter(“pass”);",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "오탐",
        "guide": "374"
    },
    "320": {
        "question": "public static EgovFormBasedUUID nameUUIDFromBytes(byte[] name) {\nMessageDigest md = null;\ntry {\nmd = MessageDigest.getInstance(“MD5”);\n} catch (NoSuchAlgorithmException e) {\nthrow new InternalError(“MD5 not supported”);\n}\nbyte[] md5Bytes = md.digest(name);\nmd5Bytes[6] &= 0x0f; /* clear version */\nmd5Bytes[6] |= 0x30; /* set to version 3 */\nmd5Bytes[8] &= 0x3f; /* clear variant */\nmd5Bytes[8] |= 0x80; /* set to IETF variant */\nreturn new EgovFormBasedUUID(md5Bytes);\n}",
        "vuln": "취약한 암호화 알고리즘 사용",
        "TFpositive": "정탐",
        "guide": "335"
    },
    "321": {
        "question": "File f = new File(downloadedFilePath);\nJarFile jf = new JarFile(f);",
        "vuln": "부적절한 전자서명 확인",
        "TFpositive": "정탐",
        "guide": "375"
    },
    "322": {
        "question": "fis = new FileInputStream(PROPERTIES_FILE);\nprops.load(new java.io.BufferedInputStream(fis));\nuserName = (String)props.getProperty(“id”);\npassword = (String)props.getProperty(“password”);\nif (authenticate(userName, password)) { … }",
        "vuln": "취약한 비밀번호 허용",
        "TFpositive": "오탐",
        "guide": "374"
    },
    "323": {
        "question": "import java.io.*;\nclass FileAccessThread extends Thread {\npublic void run() {\ntry {\nFile f = new File(“Test_367.txt”);\nif(f.exists()) {\nBufferedReader br = new BufferedReader(new FileReader(f));\nbr.close();\n}\n} catch(IOException e) {\nSystem.err.println(“IOException occured”);}\n}\n}\nclass FileDeleteThread extends Thread {\npublic void run() {\nFile f = new File(“Test_367.txt”);\nif (f.exists()) {\nf.delete();\n}\n}\n}\npublic class U367 {\npublic static void main(String[] args) {\nFileAccessThread fileAccessThread = new FileAccessThread();\nFileDeleteThread fileDeleteThread = new FileDeleteThread();\nfileAccessThread.start();\nfileDeleteThread.start();\n}\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "정탐",
        "guide": "411"
    },
    "324": {
        "question": "class FileMgmtThread extends Thread {\nprivate String manageType = \"\";\npublic FileMgmtThread (String type) {\nmanageType = type;\n}\npublic void run() {\ntry {\nif (manageType.equals(\"READ\")) {\nFile f = new File(\"Test_367.txt\");\nif (f.exists()) {\nBufferedReader br = new BufferedReader(new FileReader(f));\nbr.close();\n}\n} else if (manageType.equals(\"DELETE\")) {\nFile f = new File(\"Test_367.txt\");\nif (f.exists()) {\nf.delete();\n} else { … }\n}\n} catch (IOException e) { … }\n}\n}\npublic class CWE367 {\npublic static void main (String[] args) {\nFileMgmtThread fileAccessThread = new FileMgmtThread(\"READ\");\nFileMgmtThread fileDeleteThread = new FileMgmtThread(\"DELETE\");\nfileAccessThread.start();\nfileDeleteThread.start();\n}\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "정탐",
        "guide": "407"
    },
    "325": {
        "question": "static volatile double account;\nstatic mtx_t account_lock;\nvoid deposit(int amount) {\nmutex_lock(&account_lock);\naccount += amount;\nmutex_unlock(&account_lock);\n}\nvoid withdraw(int amount) {\nmutex_lock(&account_lock);\naccount -= amount;\nmutex_unlock(&account_lock);\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "오탐",
        "guide": "411"
    },
    "326": {
        "question": "class FileMgmtThread extends Thread {\nprivate static final String SYNC = \"SYNC\";\nprivate String manageType = \"\";\npublic FileMgmtThread (String type) {\nmanageType = type;\n}\npublic void run() {\nsynchronized(SYNC) {\ntry {\nif (manageType.equals(\"READ\")) {\nFile f = new File(\"Test_367.txt\");\nif (f.exists()) {\nBufferedReader br = new BufferedReader(new FileReader(f));\nbr.close();\n}\n} else if (manageType.equals(\"DELETE\")) {\nFile f = new File(\"Test_367.txt\");\nif (f.exists()) {\nf.delete();\n} else { … }\n}\n} catch (IOException e) { … }\n}\n}\n}\npublic class CWE367 {\npublic static void main (String[] args) {\nFileMgmtThread fileAccessThread = new FileMgmtThread(\"READ\");\nFileMgmtThread fileDeleteThread = new FileMgmtThread(\"DELETE\");\nfileAccessThread.start();\nfileDeleteThread.start();\n}\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "오탐",
        "guide": "408"
    },
    "327": {
        "question": "public MenuVO getFirstLeafChildMenu(int menuSeq) {\nList<MenuVO> childMenuList = menuMap.get(menuSeq).getChildMenuList();\nif (CollectionUtils.isEmpty(childMenuList)) {\nreturn menuMap.get(menuSeq);\n}\nreturn getFirstLeafChildMenu(childMenuList.get(0).getMenuSeq());\n}",
        "vuln": "종료되지 않는 반복문 또는 재귀 함수",
        "TFpositive": "오탐",
        "guide": "418"
    },
    "328": {
        "question": "[MethodImpl(MethodImplOptions.Synchronized)]\npublic void ReadFile(String f)\n{\nif(File.Exists(f))\n{\nFile.ReadAllLines(f);\n}\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "오탐",
        "guide": "409"
    },
    "329": {
        "question": "file = new File(filename);\nFile[] fList = file.listFiles();\nfor (int i = 0; i < fList.length; i++) {\ncurrentList.add(fList[i].getAbsolutePath()\n+ “$” + getLastModifiedTime(fList[i]) + “$”\n+ ((fList[i].length() / 1024) > 0 ? (fList[i].length() / 1024) : 1)\n+ “KB”);\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "오탐",
        "guide": "413"
    },
    "330": {
        "question": "if (!access(file,W_OK))\n{\nf = fopen(file,”w+”);\noperate(f);\n…\n}\nelse\n{\nfprintf(stderr,”Unable to open file %s.\\n”,file);\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "정탐",
        "guide": "413"
    },
    "331": {
        "question": "#include <stdio.h>\nint factorial(int i)\n{\nreturn i * factorial(i - 1);\n}\nint main()\n{\nint num = 5;\nint result = factorial(num);\nprintf(\"%d! : %d\\n\", num, result);\nreturn 0;\n}",
        "vuln": "종료되지 않는 반복문 또는 재귀 함수",
        "TFpositive": "정탐",
        "guide": "415"
    },
    "332": {
        "question": "public void ReadFile(String f)\n{\nif(File.Exists(f))\n{\nFile.ReadAllLines(f);\n}\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "정탐",
        "guide": "409"
    },
    "333": {
        "question": "#include <stdio.h>\nint factorial(int I)\n{\nif (i <= 1) {\nreturn 1;\n}\nreturn i * factorial(i - 1);\n}\nint main()\n{\nint num = 5;\nint result = factorial(num);\nprintf(\"%d! : %d\\n\", num, result);\nreturn 0;\n}",
        "vuln": "종료되지 않는 반복문 또는 재귀 함수",
        "TFpositive": "오탐",
        "guide": "416"
    },
    "334": {
        "question": "File f = new File(“toctou.txt”);\nif (!f.exists()) {\nFileOutputStream fos = null;\ntry {\nfos = new FileOutputStream(“toctou.txt”)\n} catch (IOException e) {\n     // TODO 에러 처리를 한다.\n} finally {\n    // 자원을 해제한다. \n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "정탐",
        "guide": "412"
    },
    "335": {
        "question": "public class RecursiveCall {\nprivate int a;\npublic void func(int a) {\nthis.a = a;\n}\npublic void func(String a) {\nfunc(a);\n}\n}",
        "vuln": "종료되지 않는 반복문 또는 재귀 함수",
        "TFpositive": "정탐",
        "guide": "417"
    },
    "336": {
        "question": "static volatile double account;\nvoid deposit(int amount) {\naccount += amount;\n}\nvoid withdraw(int amount) {\naccount -= amount;\n}",
        "vuln": "경쟁조건 검사 시점과 사용 시점",
        "TFpositive": "정탐",
        "guide": "410"
    },
    "337": {
        "question": "public static int cardinality (Object obj, final Collection col) {\nint count = 0;\nif (col == null) {\nreturn count;\n}\nIterator it = col.iterator();\nwhile (it.hasNext()) {\nObject elt = it.next();\nif ((null == obj && null == elt) || obj.equals(elt)) {\ncount++;\n}\n}\nreturn count;\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "정탐",
        "guide": "433"
    },
    "338": {
        "question": "pickled_data = pickle.dumps(data)\ndigest = hmac.new('shared-key', pickled_data, hashlib.sha1).hexdigest()\nheader = '%s' % (digest)\nconn.send(header + ' ' + pickled_data)",
        "vuln": "신뢰할 수 없는 데이터의 역직렬화",
        "TFpositive": "오탐",
        "guide": "468"
    },
    "339": {
        "question": "conn,addr = self.receiver_socket.accept()\ndata = conn.recv(1024)\nrecvd_digest, pickled_data = data.split(' ')\nnew_digest = hmac.new('shared-key', pickled_data, hashlib.sha1).hexdigest()\nif recvd_digest != new_digest:\nprint 'Integrity check failed'\nelse:\nunpickled_data = pickle.loads(pickled_data)",
        "vuln": "신뢰할 수 없는 데이터의 역직렬화",
        "TFpositive": "오탐",
        "guide": "468"
    },
    "340": {
        "question": "int x=1, y=1;\nswitch(position) {\ncase 0: x = base_position y = base_position beak;\ncase 1: x = base_position + i y = base_position - i break;\ndefault: x=1; break;\n}\nsetCursorPosition(x,y);",
        "vuln": "초기화되지 않은 변수 사용",
        "TFpositive": "오탐",
        "guide": "460"
    },
    "341": {
        "question": "protected void Page_Load(object sender, EventArgs e) {\nstring username = Request.QueryString[“name”];\nif ( username != null && username > 20) {\n// length error\n}\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "오탐",
        "guide": "435"
    },
    "342": {
        "question": "public static void main(String[] args) throws\nIOException, GeneralSecurityException, ClassNotFoundException {\n....\nObjectInputStream in = new ObjectInputStream(new FileInputStream(\"data\"));\nsealedMap = (SealedObject) in.readObject();\nin.close();\ncipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key);\nsignedMap = (SignedObject) sealedMap.getObject(cipher);\nif (!signedMap.verify(kp.getPublic(), sig)) {\nthrow new GeneralSecurityException(\"Map failed verification\");\n}\nmap = (SerializableMap<String, Integer>) signedMap.getObject();\n}",
        "vuln": "신뢰할 수 없는 데이터의 역직렬화",
        "TFpositive": "정탐",
        "guide": "463"
    },
    "343": {
        "question": "String Tokenizer st = new String Tokenizer(info_url,”?”);\nint sti=0;\nwhile (st.hasMoreTokens()) {\nif(sti==0)\njsonUrl=st.nextToken();\nif(sti==1)\njsparam=st.nextToken();\nsti++;\n}\nString [] jsonParams = jsparam.split(“&”);\njsparam=””;\nfor (int i=0;i<jsonParams.length;i++) {\njsparam=jsparam+jsonParams[i].split(“=”)[0]+”: ‘”+jsonParams[i].split(“=”)[1]+”’”;\nif(i!=jsonParams.length-1)jsparam=jsparam+”,”;\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "오탐",
        "guide": "440"
    },
    "344": {
        "question": "int x, y;\nswitch(position) {\ncase 0: x = base_position y = base_position beak;\ncase 1: x = base_position + i y = base_position - i break;\ndefault: x=1; break;\n}\nsetCursorPosition(x,y);",
        "vuln": "초기화되지 않은 변수 사용",
        "TFpositive": "정탐",
        "guide": "459"
    },
    "345": {
        "question": "public static void main(String[] args) throws\nIOException, GeneralSecurityException, ClassNotFoundException {\n....\nObjectInputStream in = new ObjectInputStream(new FileInputStream(\"data\"));\nsealedMap = (SealedObject) in.readObject();\nin.close();\ncipher = Cipher.getInstance(\"AES\");\ncipher.init(Cipher.DECRYPT_MODE, key);\nsignedMap = (SignedObject) sealedMap.getObject(cipher);\nif (!signedMap.verify(kp.getPublic(), sig)) {\nthrow new GeneralSecurityException(\"Map failed verification\");\n}\nmap = (SerializableMap<String, Integer>) signedMap.getObject();\n}",
        "vuln": "신뢰할 수 없는 데이터의 역직렬화",
        "TFpositive": "정탐",
        "guide": "463"
    },
    "346": {
        "question": "public static void testFunction(String dateStr1) throws Exception {\nSimpleDateFormat sdf = new SimpleDateFormat(“yyyyMMdd”,Locale.getDefault());\nDate date1 = null;\ntry {\ndate1 = sdf.parse(dateStr1);\n} catch (ParseException e) {\nSystem.err.println(“Inner Function”);\ne.printStackTrace();\nthrownew Exception(e);\n}\nSystem.out.println(“After Throw 1”);\nint days1 = (int)((date1.getTime()/100000)/24);\nSystem.out.println(“After Throw 2”);\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "오탐",
        "guide": "441"
    },
    "347": {
        "question": "[program_view.jsp]\n…\nString strContent = UTIL.enter2br((String)hsROW.get(“content”));\nString linkPage= “”;\nif (!strContent.equals(“”)) {\nlinkPage = strContent.replaceAll(“ ”, “<img src=’ 상세보기\n…\n[Util.java]\npublic static String enter2br(String data) {\nif(data == null)\nreturn null;\nStringTokenizer st = new StringTokenizer(data, “\\n”);\n…\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "정탐",
        "guide": "439"
    },
    "348": {
        "question": "InputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(inputFile);\nout = new FileOutputStream(outputFile);\n...\nFileCopyUtils.copy(fis, os);\n} catch (IOException e) {\nlogger.error(e);\n} finally {\nif (in != null) {\ntry {\nin.close();\n} catch (IOException e) {\nlogger.error(e);\n}\n}\nif (out != null) {\ntry {\nout.close();\n} catch (IOException e) {\nlogger.error(e);\n}\n}\n}",
        "vuln": "부적절한 자원 해제",
        "TFpositive": "오탐",
        "guide": "446"
    },
    "349": {
        "question": "SimpleDateFormat sdf = new SimpleDateFormat(“yyyyMMdd”,Locale.getDefault());\nDate date1 = null;\ntry {\ndate1 = sdf.parse(dateStr1);\n} catch (ParseException e) {\nSystem.err.println(“Inner Function”);\ne.printStackTrace();\n}\nSystem.out.println(“After Throw 1”);\nint days1 = (int)((date1.getTime()/100000)/24);)\nintdays2 = (int)((date1.getTime()/100000)/24);\nSystem.out.println(“After Throw 2”);",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "오탐",
        "guide": "441"
    },
    "350": {
        "question": "public static int cardinality (Object obj, final Collection col) {\nint count = 0;\nif (col == null) {\nreturn count;\n}\nIterator it = col.iterator();\nwhile (it.hasNext()) {\nObject elt = it.next();\nif ((null == obj && null == elt) || (null != obj && obj.equals(elt))) {\ncount++;\n}\n}\nreturn count;\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "오탐",
        "guide": "434"
    },
    "351": {
        "question": "class Foo\n{\npublic:\nFoo() {} // default constructor, doesn’t initialize a_\nFoo(int a) : a_(a) {} // constructor\nint get_a() const {return a_;}\nprivate:\nint a_;\n};\nint main(void)\n{\nFoo foo1; // calls default\nconstructor\nstd::cout << foo1.get_a() <<\nstd::endl;\nreturn 0;\n}",
        "vuln": "초기화되지 않은 변수 사용",
        "TFpositive": "정탐",
        "guide": "461"
    },
    "352": {
        "question": "public void FileStreamTest()\n{\nusing(FileStream fsSource = new FileStream(pathSource,\nFileMode.Open,FileAccess.Read)){\nbyte[] bytes = new byte[fsSource.Length];\nint numBytesToRead = (int)fsSource.Length;\nint numBytesRead = 0;\nwhile(numBytesToRead > 0)\n{\nint n = fsSource.Read(bytes, numBytesRead, numBytesToRead);\nif(n==0)\nbreak;\nnumBytesToRead += n;\nnumBytesToRead -= n;\n}\n}\nusing(FileStream fsNew = new FileStream(pathNew, FileMode.Create,FileAccess.Write))\n{ /* OK */\nfsNew.Write(bytes, 0, numBytesToRead);\n}\n}",
        "vuln": "부적절한 자원 해제",
        "TFpositive": "오탐",
        "guide": "448"
    },
    "353": {
        "question": "class DeserializeExample {\npublic static Object deserialize(byte[] buffer)\nthrows IOException, ClassNotFoundException {\nObject ret = null;\ntry (ByteArrayInputStream bais = new ByteArrayInputStream(buffer)) {\ntry (ObjectInputStream ois = new ObjectInputStream(bais)) {\nret = ois.readObject();\n}\n}\nreturn ret;\n}\n}",
        "vuln": "신뢰할 수 없는 데이터의 역직렬화",
        "TFpositive": "정탐",
        "guide": "464"
    },
    "354": {
        "question": "public class G02 extends HttpServlet {\nprotected void doPost(HttpServletRequest req, HttpServletResponse res) throws\nServletException, IOException {\nObjectInputStream ois = null;\nImageInformation retImgInfo = null;\ntry {\n// HttpServletRequest InputStream . 의 은 사용자 입력값이다\nois = new ObjectInputStream(req.getInputStream());\nretImgInfo = (ImageInformation) ois.readObject();\nretImgInfo.setImgUrl(\"SERVERIMGURL\");\n} catch (Exception e) {\n...\n} finally\n...\n}",
        "vuln": "신뢰할 수 없는 데이터의 역직렬화",
        "TFpositive": "정탐",
        "guide": "467"
    },
    "355": {
        "question": "try {\nString sqlSelect = “SELECT USER_ID, PWD FROM USER”\nString sqlUpdate = “UPDATE USER SET PASSWD = ? WHERE USER_ID = ?\nClass.forName(“oracle.jdbc.driver.OracleDriver”);\nconn = DriverManager.getConnection(“jdbc:oracle:thin:@192.168.1.1:1521:db”,“aaa”,\n“AAA”);\npstmt = conn.prepareStatement(sqlSelect);\npstmt1 = conn.prepareStatement(sqlUpdate);\nrs = pstmt.executeQuery();\nwhile( rs.next()) {\nSystem.out.println(“#################### user_id : “ + rs.getString(“USER_ID”));\npstmt1.setString(1, CryptUtils.encrypt(rs.getString(“PWD”)));\npstmt1.setString(2, rs.getString(“USER_ID”));\npstmt1.executeUpdate();\npstmt1.clearParameters();\nSystem.out.println(“#################### 01 : “);\n}\nconn.commit();\n} catch(Exception e) {\ne.printStackTrace();\ntry {\nconn.rollback();\n} catch (Exception ex) { }\n} finally {\ntry {\nrs.close();\n} catch (Exception e) { }\ntry {\npstmt.close();\n} catch(Exception e) { }\ntry {\npstmt1.close();\n} catch (Exception e) { }\ntry {\nconn.close();\n} catch (Exception e) { }\n}",
        "vuln": "부적절한 자원 해제",
        "TFpositive": "오탐",
        "guide": "451"
    },
    "356": {
        "question": "public class WhitelistedObjectInputStream extends ObjectInputStream {\npublic Set<String> whitelist;\npublic WhitelistedObjectInputStream(InputStream inputStream, Set<String> wl)\nthrows IOException {\nsuper(inputStream);\nwhitelist = wl;\n}\n@Override\nprotected Class<?> resolveClass(ObjectStreamClass cls) throws IOException,\nClassNotFoundException {\nif (!whitelist.contains(cls.getName())) {\nthrow new InvalidClassException(\"Unexpected serialized class\", cls.getName());\n}\nreturn super.resolveClass(cls);\n}\n}\n@RequestMapping(value = \"/upload\", method = RequestMethod.POST)\npublic Student upload(@RequestParam(\"file\") MultipartFile multipartFile)\nthrows ClassNotFoundException, IOException {\nStudent student = null;\nFile targetFile = new File(\"/temp/\" + multipartFile.getOriginalFilename());\nSet<String> whitelist = new HashSet<String>(Arrays.asList(\nnew String[] {\n\"Student\"\n}));\ntry (InputStream fileStream = multipartFile.getInputStream()) {\ntry (WhitelistedObjectInputStream ois =\nnew WhitelistedObjectInputStream(fileStream, whitelist)) {\nstudent = (Student) ois.readObject();\n}\n}\nreturn student;\n}",
        "vuln": "신뢰할 수 없는 데이터의 역직렬화",
        "TFpositive": "오탐",
        "guide": "465"
    },
    "357": {
        "question": "int main(int argc, const char *argv[]) {\nchar *temp;\ntemp = (char *)malloc(BUFFER_SIZE);\n……\nfree(temp);\nstmcpy(temp, argv[1], BUFFER_SIZE-1);\n}",
        "vuln": "해제된 자원 사용",
        "TFpositive": "정탐",
        "guide": "454"
    },
    "358": {
        "question": "#define FAIL 0\n#define SUCCESS 1\n#define ERROR -1\n#define MAX_MESSAGE_SIZE 32\nint processMessage(char **message)\n{\nint result = SUCCESS;\nint length = getMessageLength(message[0]);\nchar *messageBody;\nif ((length > 0) && (length < MAX_MESSAGE_SIZE))\n{\nmessageBody = (char*)malloc(length*sizeof(char));\nmessageBody = &message[1][0];\nint success = processMessageBody(messageBody);\nif (success == ERROR)\n{\nresult = ERROR;\nfree(messageBody);\n}\n}\nelse\n{\nprintf(“Unable to process message; invalid message length”);\nresult = FAIL;\n}\nif (result == ERROR)\n{\nlogError(“Error processing message”, messageBody);\n}\nreturn result;\n}",
        "vuln": "해제된 자원 사용",
        "TFpositive": "정탐",
        "guide": "456"
    },
    "359": {
        "question": "void NullPointerDereference(int count) {\nint *p = IntegerAddressReturn();\n*p = count;\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "정탐",
        "guide": "436"
    },
    "360": {
        "question": "public void FileStreamTest()\n{\nFileStream fsSource = new FileStream(pathSource, FileMode.Open, FileAccess.Read);\nbyte[] bytes = new byte[fsSource.Length];\nint numBytesToRead = (int)fsSource.Length;\nint numBytesRead = 0;\nwhile(numBytesToRead > 0)\n{\nint n = fsSource.Read(bytes, numBytesRead, numBytesToRead);\nif(n==0) break;\nnumBytesToRead += n;\nnumBytesToRead -= n;\n}\nusing(FileStream fsNew = new FileStream(pathNew, FileMode.Create,\nFileAccess.Write)) { /* OK */\nfsNew.Write(bytes, 0, numBytesToRead);\n}\n}",
        "vuln": "부적절한 자원 해제",
        "TFpositive": "정탐",
        "guide": "447"
    },
    "361": {
        "question": "String url = reuqest.getParamter(\"url\");\nif (url.equals(\"\"))",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "정탐",
        "guide": "434"
    },
    "362": {
        "question": "char *data;\nint data_type\nif (data_type==val_1) { free(data); }\n……\nif (data_type==val_2) { free(data); }",
        "vuln": "해제된 자원 사용",
        "TFpositive": "정탐",
        "guide": "455"
    },
    "363": {
        "question": "protected void Page_Load(object sender, EventArgs e) {\nstring username = Request.QueryString[“name”];\nif (username.Length > 20) {\n}\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "정탐",
        "guide": "435"
    },
    "364": {
        "question": "public void f() {\nString cmd = System.getProperty(“cmd”);\ncmd = cmd.trim();\nSystem.out.println(cmd);\n…",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "정탐",
        "guide": "436"
    },
    "365": {
        "question": "if(infoList == null) infoList = new ArrayList();\nfor(int i=0; containers != null && i < containers.length; i++) {\nhm = new HashMap();\nfor(int j=0; j < paramRecvData.length; j++) {\nhm.put(paramRecvData[j],\ncontainers[i].getField(paramRecvData[j]).getValueAs-String());\n}\ninfoList.add(hm);\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "오탐",
        "guide": "444"
    },
    "366": {
        "question": "void ImproperResourceRelease(char* filename) {\nchar buf[BUF_SIZE];\nFILE *f = fopen(filename, “r”);\nif(!checkSomething()) {\nprintf(“Something is wrong”);\nreturn;\n}\nfclose(f);\n}",
        "vuln": "부적절한 자원 해제",
        "TFpositive": "정탐",
        "guide": "448"
    },
    "367": {
        "question": "public Hashtable deleteAll(Connection con, GenericModel model) throws Exception {\nHashtable<String, Object> m = new Hashtable<String, Object>();\nVMResultSet vmrs = null;\nint rValue = 0;\ntry {\nArrayList grid =null ;\n….\ncon.commit();\ncon.setAutoCommit(true);\nif(rValue > 0) {\nvmrs = dao.listGoodKnowQuestion(con, model);\nvmrs.setMessage(UtilMsg.getInstance().getMsg(“SUC003”));\n} else {\nvmrs.setMessage(UtilMsg.getInstance().getMsg(“ERR000”));\n}\nm.put(“result”, vmrs); 17: } catch (Exception e) { 18: ….\n} finally {\n….\n}\nreturn m;\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "정탐",
        "guide": "437"
    },
    "368": {
        "question": "InputStream in = null;\nOutputStream out = null;\ntry {\nin = new FileInputStream(inputFile);\nout = new FileOutputStream(outputFile);\n...\nFileCopyUtils.copy(fis, os);\nin.close();\nout.close();\n} catch (IOException e) {\nlogger.error(e);\n}",
        "vuln": "부적절한 자원 해제",
        "TFpositive": "정탐",
        "guide": "445"
    },
    "369": {
        "question": "…\ntry {\nClass.forName(“com.mysql.jdbc.Driver”);\nconn = DriverManager.getConnection(url);\n…\n} catch (ClassNotFoundException e) {\nconn.rollback();\n} finally {\nif(conn != null) conn.close();\n}",
        "vuln": "부적절한 자원 해제",
        "TFpositive": "정탐",
        "guide": "450"
    },
    "370": {
        "question": "private static void makeList() {\nConnection con = null;\nStringBuffer sql = new StringBuffer();\nPreparedStatement statement = null;\nResultSet rs = null;\nlist.clear();\ntry {\ncon = GenericDAO.getDataSource().getConnection();\n……..\nstatement = con.prepareStatement(sql.toString());\nrs = statement.executeQuery();\nwhile (rs.next()) {\nString authGrp = rs.getString(“AUTHORITY_GROUP”);\n…….\n}\n} catch (Exception e) {\nif (verbose) {\n………..\n}\n} finally {\ntry {\nrs.close();\n} catch (Exception e1) {}\ntry {\nstatement.close();\n} catch (Exception e1) {}\nif (con != null) {\n: try {\ncon.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n}\n}",
        "vuln": "Null Pointer 역참조",
        "TFpositive": "정탐",
        "guide": "438"
    },
    "371": {
        "question": "try {\nString sqlSelect = “SELECT USER_ID, PWD FROM USER”\nString sqlUpdate = “UPDATE USER SET PASSWD = ? WHERE USER_ID = ?”\nClass.forName(“oracle.jdbc.driver.OracleDriver”);\nconn = DriverManager.getConnection(“jdbc:oracle:thin:@192.168.1.1:1521:db”, “aaa”,\n“AAA”);\npstmt = conn.prepareStatement(sqlSelect);\npstmt1 = conn.prepareStatement(sqlUpdate);\nrs = pstmt.executeQuery();\nwhile( rs.next()) {\nSystem.out.println(“#################### user_id : “ + rs.getString(“US- ER_ID”));\npstmt1.setString(1, CryptUtils.encrypt(rs.getString(“PWD”)));\npstmt1.setString(2, rs.getString(“USER_ID”));\npstmt1.executeUpdate();\npstmt1.clearParameters();\nSystem.out.println(“#################### 01 : “);\n}\nconn.commit();\n} catch(Exception e) {\ne.printStackTrace();\ntry {\nconn.rollback();\n} catch(Exception ex) {}\n} finally {\ntry {\nrs.close();\npstmt.close();\npstmt1.close();\nconn.close();\n} catch(Exception e) { }\n}",
        "vuln": "부적절한 자원 해제",
        "TFpositive": "정탐",
        "guide": "450"
    },
    "372": {
        "question": "public class AddManager extends BaseManager {\nprivate String[] checkb;\nprivate String[] prsn_info_sn;\nprivate String login_dept_id;\nprivate String login_user_id;\nprivate String[] prsn_group_se;\nprivate String[] isInterested;\nprivate String act;\npublic String[] getChkb() {\nreturn this.checkb;\n}\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "485"
    },
    "373": {
        "question": "class DataLeakBetweenSessions : IHttpHandler\n{\nprivate String id;\npublic void ProcessRequest(HttpContext ctx)\n{\nvar json = new JSONResonse()\n{\nSuccess = ctx.Request.QueryString[\"name\"] != null,\nName = ctx.Request.QueryString[\"name\"]\n};\nctx.Response.ContentType = \"application/json\";\nctx.Response.Write(JsonConvert.SerializeObject(json));\n}\npublic bool IsReusable\n{\nget { return false; }\n}\n}",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "471"
    },
    "374": {
        "question": "public class U489 extends HttpServlet {\nprotected void doGet(HttpServletRequest request, … ) throws … { … }\nprotected void doPost(HttpServletRequest request, … ) throws … { … }\npublic static void main(String args[]) {\nSystem.err.printf(“Print debug code”);\n}\n…",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "479"
    },
    "375": {
        "question": "void LeftoverDebugCode() {\nint i, ntprs;\nchar **strings;\nnptrs = backtrace(buffer, 100);\nstrings = backtrace_symbols(buffer, nptrs);\n…\nif(debug) {\nfor(i=0; i < nptr; i++) printf(“%s\\n”, strings[j]);\n}\n}",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "478"
    },
    "376": {
        "question": "private Color[] myColors;\n…\npublic Color[] getColors() {\nColor[] retColors = new Color[myColors.length];\nfor(int i =0; i < myColors.length; i++) {\nretColors[i] = this.myColors[i];\n}\nreturn retColors;\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "485"
    },
    "377": {
        "question": "public class U496 {\nprivate String[] userRoles;\npublic void setUserRoles(String[] userRoles) {\nthis.userRoles = userRoles;\n}\npublic void print() {\nfor (int i = 0; i < userRoles.length; i++)\nSystem.out.println(userRoles[i]);\n}\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "490"
    },
    "378": {
        "question": "@Controller\npublic class TrendForecastController {\npublic void doSomething(HttpServletRequest request) {\nint currentPage = Integer.parseInt(request.getParameter(\"page\"));\n}\n……",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "471"
    },
    "379": {
        "question": "@Controller\npublic class TrendForecastController {\nprivate int currentPage = 1;\npublic void doSomething(HttpServletRequest request) {\ncurrentPage = Integer.parseInt(request.getParameter(\"page\"));\n}\n……",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "470"
    },
    "380": {
        "question": "public class U495 {\nprivate String[] colors;\npublic String[] getColors() {\nreturn colors;\n}\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "484"
    },
    "381": {
        "question": "class Example {\npublic void Log() {\n  Console.WriteLine(\"sensitive info\");\n}\n}",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "477"
    },
    "382": {
        "question": "class Program\n{\nprivate String[] userRoles;\npublic void SetUserRoles(String[] userRoles)\n{\nthis.userRoles = userRoles;\n}\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "489"
    },
    "383": {
        "question": "<%@ page import=”java.util.*” %>\n<%@ page import=”maha.ns.comm.util.StringUtil” %>\n<%@ page import=”maha.ns.comm.util.Page” %>\n<%@ taglib uri=”comm.tld” prefix=”comm” %>\n<%!\nfinal String imagePath = “/img/”;\nString treeImagePath = imagePath+”/port/tree.gif”;\n%>",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "474"
    },
    "384": {
        "question": "<%@page import=\"javax.xml.namespace.*\"%>\n<%@page import=\"gov.mogaha.ntis.web.frs.gis.cmm.util.*\" %>\n<%\nString username = \"/\";\nString imagePath = commonPath + \"img/\";\nString imagePath_gis = imagePath + \"gis/cmm/btn/\";\n……\n%>",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "470"
    },
    "385": {
        "question": "class Base64 {\npublic static void main(String[] args) {\nif (debug) {\nbyte[] a = { (byte) 0xfc, (byte) 0x0f, (byte) 0xc0 };\nbyte[] b = { (byte) 0x03, (byte) 0xf0, (byte) 0x3f };\n……\n}\n}\npublic void otherMethod() { … }\n}",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "476"
    },
    "386": {
        "question": "<%@ page language=”java” import=”java.io.*, java.text.* ,java.util.*, java.net.*,\ncom.ins.system.config.*, com.ins.system.exception.*”%>\n<%!\nprivate class CacheEntity {\nString name;\nString lastModified;\nString expires;\nString eTag;\n}",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "474"
    },
    "387": {
        "question": "private List<Color> colors;\npublic List<Color> getUserColors() {\nList< ICloneable> newList = new List< ICloneable>(colors.Count);\ncolors.ForEach((item) =>\n{\nnewList.Add((ICloneable)item.Clone());\n});\nreturn newList;\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "오탐",
        "guide": "484"
    },
    "388": {
        "question": "private String[] colors;\npublic String[] getColors() { return colors; }",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "482"
    },
    "389": {
        "question": "<%@ page import=”javax.xml.namespace.*” %>\n<%@ page import=”maha.ns.web.fta.gaa.comm.util.*” %>\n<%@ page import=”maha.ns.web.fta.gaa.comm.util.SSOSessionUtil”%>\n<%!\nString commonPath = “/”;\nString imagePath= commonPath +”img/”;\nString imagePath_gis = imagePath +”gis/cmm/btn/”;",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "473"
    },
    "390": {
        "question": "public class U489 extends HttpServlet {\nprotected void doGet(HttpServletRequest request, …) throws …{ …}\nprotected void doPost(HttpServletRequest request, …) throws …{ …}\npublic static void main(String args[]) {\nSystem.err.printf(“Print debug code”);\n}\n}",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "479"
    },
    "391": {
        "question": "private String[] userRoles;\npublic void setUserRoles(String[] userRoles) {\nthis.userRoles = userRoles;\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "488"
    },
    "392": {
        "question": "private UserRole[] userRoles;\npublic void setUserRoles(UserRole[] userRoles) {\nthis.userRoles = userRoles;\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "487"
    },
    "393": {
        "question": "public static final String[] XML_TAG = { “<?xml version=\\”1.0\\”\nencoding=\\””, “\\”?>” }",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "오탐",
        "guide": "485"
    },
    "394": {
        "question": "@Resource(name = “fileMngService”)\nprivate FileMngService fileService;",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "475"
    },
    "395": {
        "question": "private UserRole[] userRoles;\n…\npublic void setUserRoles(UserRole[] userRoles) {\nthis.userRoles = new UserRole[userRoles.length];\nfor(int i =0; i < userRoles.length; i++) {\nthis.userRoles[i] = userRoles[i]; // 일반 객체일 경우 주소값만 복사된다 .\n}\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "491"
    },
    "396": {
        "question": "private List<Color> colors;\npublic List<Color> getUserColors() { return colors; }",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "483"
    },
    "397": {
        "question": "public class U488 extends HttpServlet\n{\nprivate String name;\nprotected void doPost(HttpServletRequest request, HttpServletResponse response)\nthrows ServletException, IOException\n{\nname = request.getParameter(“name”);\n…\nout.println(name + “, thanks for visiting!”);\n}\n}",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "473"
    },
    "398": {
        "question": "private String[] colors;\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nString[] newColors = getColors();\n......\n}\npublic String[] getColors() {\nString[] ret = null;\nif ( this.colors != null ) {\nret = new String[colors.length];\nfor (int i = 0; i < colors.length; i++) { ret[i] = this.colors[i]; }\n}\nreturn ret;\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "오탐",
        "guide": "483"
    },
    "399": {
        "question": "class DataLeakBetweenSessions : IHttpHandler\n{\npublic void ProcessRequest(HttpContext ctx)\n{\nctx.Session[\"id\"] = ctx.Request.QueryString[\"id\"];\nvar json = new JSONResonse()\n{\nSuccess = ctx.Request.QueryString[\"name\"] != null,\nName = ctx.Request.QueryString[\"name\"]\n};\nctx.Response.ContentType = \"application/json\";\nctx.Response.Write(JsonConvert.SerializeObject(json));\n}\npublic bool IsReusable\n{\nget { return false; }\n}\n}",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "472"
    },
    "400": {
        "question": "public class AddManager extends BaseManager {\nprivate String[] checkb;\nprivate String[] prsn_info_sn;\nprivate String login_dept_id;\nprivate String login_user_id;\nprivate String[] prsn_group_se;\nprivate String[] isInterested;\nprivate String act;\npublic String[] getChkb() {\nreturn this.checkb;\n}\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "485"
    },
    "401": {
        "question": "class DataLeakBetweenSessions : IHttpHandler\n{\nprivate String id;\npublic void ProcessRequest(HttpContext ctx)\n{\nvar json = new JSONResonse()\n{\nSuccess = ctx.Request.QueryString[\"name\"] != null,\nName = ctx.Request.QueryString[\"name\"]\n};\nctx.Response.ContentType = \"application/json\";\nctx.Response.Write(JsonConvert.SerializeObject(json));\n}\npublic bool IsReusable\n{\nget { return false; }\n}\n}",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "471"
    },
    "402": {
        "question": "public class U489 extends HttpServlet {\nprotected void doGet(HttpServletRequest request, … ) throws … { … }\nprotected void doPost(HttpServletRequest request, … ) throws … { … }\npublic static void main(String args[]) {\nSystem.err.printf(“Print debug code”);\n}\n…",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "479"
    },
    "403": {
        "question": "void LeftoverDebugCode() {\nint i, ntprs;\nchar **strings;\nnptrs = backtrace(buffer, 100);\nstrings = backtrace_symbols(buffer, nptrs);\n…\nif(debug) {\nfor(i=0; i < nptr; i++) printf(“%s\\n”, strings[j]);\n}\n}",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "478"
    },
    "404": {
        "question": "private Color[] myColors;\n…\npublic Color[] getColors() {\nColor[] retColors = new Color[myColors.length];\nfor(int i =0; i < myColors.length; i++) {\nretColors[i] = this.myColors[i];\n}\nreturn retColors;\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "485"
    },
    "405": {
        "question": "public class U496 {\nprivate String[] userRoles;\npublic void setUserRoles(String[] userRoles) {\nthis.userRoles = userRoles;\n}\npublic void print() {\nfor (int i = 0; i < userRoles.length; i++)\nSystem.out.println(userRoles[i]);\n}\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "490"
    },
    "406": {
        "question": "@Controller\npublic class TrendForecastController {\npublic void doSomething(HttpServletRequest request) {\nint currentPage = Integer.parseInt(request.getParameter(\"page\"));\n}\n……",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "471"
    },
    "407": {
        "question": "@Controller\npublic class TrendForecastController {\nprivate int currentPage = 1;\npublic void doSomething(HttpServletRequest request) {\ncurrentPage = Integer.parseInt(request.getParameter(\"page\"));\n}\n……",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "470"
    },
    "408": {
        "question": "public class U495 {\nprivate String[] colors;\npublic String[] getColors() {\nreturn colors;\n}\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "484"
    },
    "409": {
        "question": "class Example {\npublic void Log() {\n//Console.WriteLine(\"sensitive info\");\n}\n}",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "오탐",
        "guide": "477"
    },
    "410": {
        "question": "class Program\n{\nprivate String[] userRoles;\npublic void SetUserRoles(String[] userRoles)\n{\nthis.userRoles = userRoles;\n}\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "489"
    },
    "411": {
        "question": "<%@ page import=”java.util.*” %>\n<%@ page import=”maha.ns.comm.util.StringUtil” %>\n<%@ page import=”maha.ns.comm.util.Page” %>\n<%@ taglib uri=”comm.tld” prefix=”comm” %>\n<%!\nfinal String imagePath = “/img/”;\nString treeImagePath = imagePath+”/port/tree.gif”;\n%>",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "474"
    },
    "412": {
        "question": "<%@page import=\"javax.xml.namespace.*\"%>\n<%@page import=\"gov.mogaha.ntis.web.frs.gis.cmm.util.*\" %>\n<%\nString username = \"/\";\nString imagePath = commonPath + \"img/\";\nString imagePath_gis = imagePath + \"gis/cmm/btn/\";\n……\n%>",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "470"
    },
    "413": {
        "question": "class Base64 {\npublic static void main(String[] args) {\nif (debug) {\nbyte[] a = { (byte) 0xfc, (byte) 0x0f, (byte) 0xc0 };\nbyte[] b = { (byte) 0x03, (byte) 0xf0, (byte) 0x3f };\n……\n}\n}\npublic void otherMethod() { … }\n}",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "476"
    },
    "414": {
        "question": "<%@ page language=”java” import=”java.io.*, java.text.* ,java.util.*, java.net.*,\ncom.ins.system.config.*, com.ins.system.exception.*”%>\n<%!\nprivate class CacheEntity {\nString name;\nString lastModified;\nString expires;\nString eTag;\n}",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "474"
    },
    "415": {
        "question": "private List<Color> colors;\npublic List<Color> getUserColors() {\nList< ICloneable> newList = new List< ICloneable>(colors.Count);\ncolors.ForEach((item) =>\n{\nnewList.Add((ICloneable)item.Clone());\n});\nreturn newList;\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "오탐",
        "guide": "484"
    },
    "416": {
        "question": "private String[] colors;\npublic String[] getColors() { return colors; }",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "482"
    },
    "417": {
        "question": "<%@ page import=”javax.xml.namespace.*” %>\n<%@ page import=”maha.ns.web.fta.gaa.comm.util.*” %>\n<%@ page import=”maha.ns.web.fta.gaa.comm.util.SSOSessionUtil”%>\n<%!\nString commonPath = “/”;\nString imagePath= commonPath +”img/”;\nString imagePath_gis = imagePath +”gis/cmm/btn/”;",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "473"
    },
    "418": {
        "question": "public class U489 extends HttpServlet {\nprotected void doGet(HttpServletRequest request, …) throws …{ …}\nprotected void doPost(HttpServletRequest request, …) throws …{ …}\npublic static void main(String args[]) {\nSystem.err.printf(“Print debug code”);\n}\n}",
        "vuln": "제거되지 않고 남은 디버그 코드",
        "TFpositive": "정탐",
        "guide": "479"
    },
    "419": {
        "question": "private String[] userRoles;\npublic void setUserRoles(String[] userRoles) {\nthis.userRoles = userRoles;\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "488"
    },
    "420": {
        "question": "private UserRole[] userRoles;\npublic void setUserRoles(UserRole[] userRoles) {\nthis.userRoles = userRoles;\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "487"
    },
    "421": {
        "question": "public static final String[] XML_TAG = { “<?xml version=\\”1.0\\”\nencoding=\\””, “\\”?>” }",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "오탐",
        "guide": "485"
    },
    "422": {
        "question": "@Resource(name = “fileMngService”)\nprivate FileMngService fileService;",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "475"
    },
    "423": {
        "question": "private UserRole[] userRoles;\n…\npublic void setUserRoles(UserRole[] userRoles) {\nthis.userRoles = new UserRole[userRoles.length];\nfor(int i =0; i < userRoles.length; i++) {\nthis.userRoles[i] = userRoles[i];\n}\n}",
        "vuln": "Private 배열에 Public 데이터 할당",
        "TFpositive": "정탐",
        "guide": "491"
    },
    "424": {
        "question": "private List<Color> colors;\npublic List<Color> getUserColors() { return colors; }",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "정탐",
        "guide": "483"
    },
    "425": {
        "question": "public class U488 extends HttpServlet\n{\nprivate String name;\nprotected void doPost(HttpServletRequest request, HttpServletResponse response)\nthrows ServletException, IOException\n{\nname = request.getParameter(“name”);\n…\nout.println(name + “, thanks for visiting!”);\n}\n}",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "정탐",
        "guide": "473"
    },
    "426": {
        "question": "private String[] colors;\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nString[] newColors = getColors();\n......\n}\npublic String[] getColors() {\nString[] ret = null;\nif ( this.colors != null ) {\nret = new String[colors.length];\nfor (int i = 0; i < colors.length; i++) { ret[i] = this.colors[i]; }\n}\nreturn ret;\n}",
        "vuln": "Public 메소드부터 반환된 Private 배열",
        "TFpositive": "오탐",
        "guide": "483"
    },
    "427": {
        "question": "class DataLeakBetweenSessions : IHttpHandler\n{\npublic void ProcessRequest(HttpContext ctx)\n{\nctx.Session[\"id\"] = ctx.Request.QueryString[\"id\"];\nvar json = new JSONResonse()\n{\nSuccess = ctx.Request.QueryString[\"name\"] != null,\nName = ctx.Request.QueryString[\"name\"]\n};\nctx.Response.ContentType = \"application/json\";\nctx.Response.Write(JsonConvert.SerializeObject(json));\n}\npublic bool IsReusable\n{\nget { return false; }\n}\n}",
        "vuln": "잘못된 세션에 의한 데이터 정보 노출",
        "TFpositive": "오탐",
        "guide": "472"
    },
    "428": {
        "question": "1 try {\n2 rd = new BufferedReader(new FileReader(new File(filename)));\n3 } catch(IOException e) {\n4 e.printStackTrace();\n5 }",
        "vuln": "오류 메시지 정보노출",
        "TFpositive": "정탐",
        "guide": "419"
    },
    "429": {
        "question": "1 } catch(IOException e) {\n2 System.err.print(e.getMessage());\n3 }",
        "vuln": "오류 메시지 정보노출",
        "TFpositive": "정탐",
        "guide": "420"
    },
    "430": {
        "question": "1 try {\n2 rd = new BufferedReader(new FileReader(new File(filename)));\n3 } catch(IOException e) {\n4 logger.error(\"ERROR-01: 파일 열기 에러\");\n5 }",
        "vuln": "오류 메시지 정보노출",
        "TFpositive": "오탐",
        "guide": "420"
    },
    "431": {
        "question": "1 try\n2 {\n3 //do something\n4 }\n5 catch (CustomException e)\n6 {\n7 Console.WriteLine(e);\n8 }",
        "vuln": "오류 메시지 정보노출",
        "TFpositive": "정탐",
        "guide": "420"
    },
    "432": {
        "question": "1 try\n2 {\n3 //do something\n4 }\n5 catch (CustomException e)\n6 {\n7 _log.Debug(“ERROR-01 : error information”);\n8 }",
        "vuln": "오류 메시지 정보노출",
        "TFpositive": "오탐",
        "guide": "421"
    },
    "433": {
        "question": "1 <%@ page language=”java” contentType=”text/html; charset=UTF-8” buffer=”-\n2 none”%>\n3 <%@page import=”egovframework.com.utl.fda.ucc.service.EgovUnitCalcUtil” %>\n4 <%\n5 String sCmd = request.getParameter(“cmd”) == null ? “” : (String)\nrequest.getParam6: eter(“cmd”);\n7 double nResult=0.0;\n8 try {\n9 if(!sCmd.equals(“”)) {\n10 EgovUnitCalcUtil egovUnitCalcUtil= new EgovUnitCalcUtil()\n11 ….\n12 }\n13 ……\n14 }\n15} catch(Exception e) {\n16 e.printStackTrace();\n17}\n18%>",
        "vuln": "오류 메시지 정보노출",
        "TFpositive": "정탐",
        "guide": "422"
    },
    "434": {
        "question": "1 BufferedReader br = null;\n2 try {\n3 br = new BufferedReader(new InputStreamReader(new FileInputStream(file), “UTF\n8”));\n4 String line = null;\n5 while ((line = br.readLine()) != null) {\n6 // …\n7 }\n8 } catch (IOException e) {\n9 logger.error(e, e);\n10 } finally {\n11 if (br != null) {\n12 try {\n13 br.close();\n14 } catch (IOException e) {\n15 logger.error(e, e);\n16 }\n17 }\n18 }",
        "vuln": "오류 메시지 정보노출",
        "TFpositive": "오탐",
        "guide": "423"
    },
    "435": {
        "question": "1 protected Element createContent(WebSession s) {\n2 ……\n3 try {\n4 username = s.getParser().getRawParameter(USERNAME);\n5 password = s.getParser().getRawParameter(PASSWORD);\n6 if (!\"webgoat\".equals(username) || !password.equals(\"webgoat\")) {\n7 s.setMessage(\"Invalid username and password entered.\");\n8 return (makeLogin(s));\n9 }\n10 } catch (NullPointerException e) {\n11 }",
        "vuln": "오류상황 대응 부재",
        "TFpositive": "정탐",
        "guide": "425"
    },
    "436": {
        "question": "1 protected Element createContent(WebSession s) {\n2 ……\n3 try {\n4 username = s.getParser().getRawParameter(USERNAME);\n5 password = s.getParser().getRawParameter(PASSWORD);\n6 if (!\"webgoat\".equals(username) || !password.equals(\"webgoat\")) {\n7 s.setMessage(\"Invalid username and password entered.\");\n8 return (makeLogin(s));\n9 }\n10 } catch (NullPointerException e) {\n11 s.setMessage(e.getMessage());\n12 return (makeLogin(s));\n13 }",
        "vuln": "오류상황 대응 부재",
        "TFpositive": "오탐",
        "guide": "426"
    },
    "437": {
        "question": "1 try {\n2 InvokeMtd();\n3 } catch (CustomException e) {\n4 \n5 }",
        "vuln": "오류상황 대응 부재",
        "TFpositive": "정탐",
        "guide": "426"
    },
    "438": {
        "question": "1 try {\n2 InvokeMtd()\n3 } catch (CustomException e) {\n4 logger.Debug(“log message”);\n5 }",
        "vuln": "오류상황 대응 부재",
        "TFpositive": "오탐",
        "guide": "426"
    },
    "439": {
        "question": "1 try {\n2 ...\n3 reader = new BufferedReader(new InputStreamReader(url.openStream()));\n4 String line = reader.readLine();\n5 SimpleDateFormat format = new SimpleDateFormat(\"MM/DD/YY\");\n6 Date date = format.parse(line);\n7 } catch (Exception e) {\n8 System.err.println(\"Exception : \" + e.getMessage());\n9 }",
        "vuln": "부적절한 예외 처리",
        "TFpositive": "정탐",
        "guide": "429"
    },
    "440": {
        "question": "1 try {\n2 ...\n3 reader = new BufferedReader(new InputStreamReader(url.openStream()));\n4 String line = reader.readLine();\n5 SimpleDateFormat format = new SimpleDateFormat(\"MM/DD/YY\");\n6 Date date = format.parse(line);\n7 } catch (MalformedURLException e) {\n8 System.err.println(\"MalformedURLException : \" + e.getMessage());\n9 } catch (IOException e) {\n10 System.err.println(\"IOException : \" + e.getMessage());\n11 } catch (ParseException e) {\n12 System.err.println(\"ParseException : \" + e.getMessage());\n13 }",
        "vuln": "부적절한 예외 처리",
        "TFpositive": "오탐",
        "guide": "430"
    },
    "441": {
        "question": "1 try {\n2 InvokeMtd();\n3 } catch (Exception e) {\n4 }",
        "vuln": "부적절한 예외 처리",
        "TFpositive": "정탐",
        "guide": "430"
    },
    "442": {
        "question": "1 try {\n2 InvokeMtd();\n3 } catch (IOException e) {\n4 logger.Debug(“IOException log here”);\n5 } catch (SQLException e){\n6 logger.Debug(“SQLException log here”);\n7 }",
        "vuln": "부적절한 예외 처리",
        "TFpositive": "오탐",
        "guide": "431"
    },
    "443": {
        "question": "1 public void doGet(HttpServletRequest req, HttpServletResponse res)\nthrows ServletException, IOException {\n2 boolean trusted = false;\n3 String ip = req.getRemoteAddr();\n4 InetAddress addr = InetAddress.getByName(ip);\n5 \n6 if (addr.getCanonicalHostName().endsWith(\"trustme.com\")) {\n7 do_something_for_Trust_System();\n8 }",
        "vuln": "DNS lookup에 의존한 보안결정",
        "TFpositive": "정탐",
        "guide": "492"
    },
    "444": {
        "question": "1 public void doGet(HttpServletRequest req, HttpServletResponse res)\nthrows ServletException, IOException {\n2 String ip = req.getRemoteAddr();\n3 if (ip == null || \"\".equals(ip)) return ;\n4 \n5 String trustedAddr = \"127.0.0.1\";\n6 if (ip.equals(trustedAddr)) {\n7 do_something_for_Trust_System();\n8 }",
        "vuln": "DNS lookup에 의존한 보안결정",
        "TFpositive": "오탐",
        "guide": "493"
    },
    "445": {
        "question": "1 bool trusted;\n2 string remoteIpAddress = Request.ServerVariables[\"REMOTE_HOST\"];\n3 IPAddress hostIPAddress = IPAddress.Parse(remoteIpAddress);\n4 IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);\n5 string hostName = hostInfo.HostName;\n6 if (hostName.EndsWith(\"trust.com\"))\n7 {\n8 trusted = true;\n9 }",
        "vuln": "DNS lookup에 의존한 보안결정",
        "TFpositive": "정탐",
        "guide": "493"
    },
    "446": {
        "question": "1 bool trusted;\n2 string remoteIpAddress = Request.ServerVariables[\"REMOTE_HOST\"];\n3 if (remoteIpAddress.Equals(trustedAddr))\n4 {\n5 trusted = true;\n6 Do_something_for_Trust_System();\n7 }",
        "vuln": "DNS lookup에 의존한 보안결정",
        "TFpositive": "오탐",
        "guide": "494"
    },
    "447": {
        "question": "1 struct hostent *hp;struct in_addr myaddr;\n2 char* tHost = \"trustme.example.com\";\n3 myaddr.s_addr=inet_addr(ip_addr_string);\n4 hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET);\n5 \n6 if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) {\n7 trusted = true;\n8 } else {\n9 trusted = false;\n10}",
        "vuln": "DNS lookup에 의존한 보안결정",
        "TFpositive": "정탐",
        "guide": "494"
    },
    "448": {
        "question": "1 struct hostent *hp;struct in_addr myaddr;\n2 char* tHost = \"127.0.0.1\";\n3 myaddr.s_addr=inet_addr(ip_addr_string);\n4 hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET);\n5 \n6 if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) {\n7 trusted = true;\n8 } else {\n9 trusted = false;\n10 }",
        "vuln": "DNS lookup에 의존한 보안결정",
        "TFpositive": "오탐",
        "guide": "495"
    },
    "449": {
        "question": "1#include <stdio.h>\n2void requestString()\n3{\n4 char str[100];\n5\n6 gets(str);\n7}",
        "vuln": "취약한 API 사용",
        "TFpositive": "정탐",
        "guide": "497"
    },
    "450": {
        "question": "1 #include <stdio.h>\n2 void requestString()\n3 {\n4 char str[100];\n5 \n6 gets_s(str, sizeof(str));\n7 }",
        "vuln": "취약한 API 사용",
        "TFpositive": "오탐",
        "guide": "498"
    },
    "451": {
        "question": "1 public class S246 extends javax.servlet.http.HttpServlet {\n2 private Socket socket\n3 protected void doGet(HttpServletRequest request,\n4 HttpServletResponse response) throws ServletException {\n5 try {\n6 \n7 socket = new Socket(\"kisa.or.kr\", 8080);\n8 } catch (UnknownHostException e) {\n9",
        "vuln": "취약한 API 사용",
        "TFpositive": "정탐",
        "guide": "498"
    },
    "452": {
        "question": "1 public class S246 extends javax.servlet.http.HttpServlet {\n2 protected void doGet(HttpServletRequest request,\n3 HttpServletResponse response) throws ServletException {\n4 ObjectOutputStream oos = null;\n5 ObjectInputStream ois = null;\n6 try {\n7 URL url = new URL(\"http://127.0.0.1:8080/DataServlet\");\n8 \n9 URLConnection urlConn = url.openConnection();\n10 urlConn.setDoOutput(true);\n11 .......",
        "vuln": "취약한 API 사용",
        "TFpositive": "오탐",
        "guide": "498"
    },
    "453": {
        "question": "1 public class U382 extends HttpServlet {\n2 public void doPost(HttpServletRequest request, HttpServletResponse response)\n3 throws ServletException, IOException {\n4 try {\n5 do_something(logger);\n6 } catch (IOException ase) {\n7 logger.info(\"ERROR\");\n8 \n9 System.exit(1);\n10 }",
        "vuln": "취약한 API 사용",
        "TFpositive": "정탐",
        "guide": "499"
    },
    "454": {
        "question": "1 public class U382 extends HttpServlet {\n2 public void doPost(HttpServletRequest request, HttpServletResponse response)\n3 throws ServletException, IOException {\n4 try {\n5 do_something(logger);\n6 } catch (IOException ase) {\n7 logger.info(\"ERROR\");\n9 }",
        "vuln": "취약한 API 사용",
        "TFpositive": "오탐",
        "guide": "499"
    },
    "455": {
        "question": "1 try{\n2 ...\n3 } catch (Exception e){\n4 ...\n6 Application.Exit();\n7 }",
        "vuln": "취약한 API 사용",
        "TFpositive": "정탐",
        "guide": "500"
    },
    "456": {
        "question": "1 try{\n2 ...\n3 } catch (Exception e){\n4 ...\n6 this.Close();\n7 }",
        "vuln": "취약한 API 사용",
        "TFpositive": "오탐",
        "guide": "500"
    },
    "457": {
        "question": "1 void manipulate_string(char * string)\n2 {\n3 char buf[24];\n4 strcpy(buf, string);\n5 …\n6 }",
        "vuln": "취약한 API 사용",
        "TFpositive": "정탐",
        "guide": "501"
    },
    "458": {
        "question": "1 public class U382 extends HttpServlet {\n2 public void doPost(HttpServletRequest request, HttpServletResponse response)\n3 throws ServletException, IOException {\n4 try {\n5 do_something(logger);\n6 } catch (IOException ase) {\n7 System.exit(1); \n8 }\n9",
        "vuln": "취약한 API 사용",
        "TFpositive": "정탐",
        "guide": "501"
    }
}